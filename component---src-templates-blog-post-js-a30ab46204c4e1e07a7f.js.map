{"version":3,"file":"component---src-templates-blog-post-js-a30ab46204c4e1e07a7f.js","mappings":"uJAyDA,IA9CY,KAAO,IAAD,EAChB,MAiBMA,EAA+B,QAAzB,GAjBCC,EAAAA,EAAAA,gBAAe,cAiBRC,KAAKC,oBAAY,aAAtB,EAAwBH,OAGvC,OACE,uBAAKI,UAAU,QAaZJ,aAAM,EAANA,EAAQK,OACP,yBACE,8BAASL,EAAOK,MAAc,YAC9B,4BACCL,aAAM,EAANA,EAAQM,UAAW,MAGpB,C,+ECvCV,MAVA,WACE,OACE,uBAAKF,UAAU,UACb,0BACE,gBAAC,EAAAG,KAAI,CAACC,GAAG,KAAI,WAIrB,EC2BA,MAnCe,IAAoC,IAAnC,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EAD6B,MAChBH,EAASI,SAiB5B,OACE,2BACE,gBAAC,EAAK,MACN,uBAAKT,UAAU,iBAAiB,oBAAmBQ,GACjD,0BAAQR,UAAU,kBAClB,4BAAOO,GACP,8BAAQ,MACH,IAAIG,MAAOC,cAAc,eAC5B,IACA,qBAAGC,KAAK,4BAA2B,YAGnC,C,+CCcV,IAvCY,IAAuC,IAAD,UAArC,YAAEC,EAAW,MAAEP,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAET,IAASD,EAAAA,EAAAA,gBAAe,cAgB1BiB,EAAkBD,GAAef,EAAKC,aAAac,YACnDE,EAAgC,QAApB,EAAGjB,EAAKC,oBAAY,aAAjB,EAAmBO,MAExC,OACE,gCACE,6BAAQS,EAAY,GAAMA,EAAiBT,GAC3C,wBAAML,KAAK,cAAce,QAASF,IAClC,wBAAMG,SAAS,WAAWD,QAASV,IACnC,wBAAMW,SAAS,iBAAiBD,QAASF,IACzC,wBAAMG,SAAS,UAAUD,QAAQ,YACjC,wBAAMf,KAAK,eAAee,QAAQ,YAClC,wBACEf,KAAK,kBACLe,SAA0B,QAAjB,EAAAlB,EAAKC,oBAAY,OAAQ,QAAR,EAAjB,EAAmBmB,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMlB,KAAK,gBAAgBe,QAASV,IACpC,wBAAML,KAAK,sBAAsBe,QAASF,IACzCP,EACA,C,uHCtCP,MAuDaa,EAAO,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACFjB,MAAOiB,EAAKC,YAAYlB,MACxBO,YAAaU,EAAKC,YAAYX,aAAeU,EAAKE,SAClD,EAIN,UAhEyB,IAGlB,IAAD,MAFJJ,MAAM,SAAEK,EAAQ,KAAEC,EAAI,KAAE7B,EAAMwB,eAAgBC,GAAM,SACpDlB,GACD,EACC,MAAMuB,GAA6B,QAAjB,EAAA9B,EAAKC,oBAAY,aAAjB,EAAmBO,QAAK,QAE1C,OACE,gBAAC,IAAM,CAACD,SAAUA,EAAUC,MAAOsB,GACjC,2BACE5B,UAAU,YACV6B,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYR,EAAKC,YAAYlB,OAC1C,yBAAIiB,EAAKC,YAAYQ,OAEvB,2BACA,2BACA,2BACEC,wBAAyB,CAAEC,OAAQX,EAAKY,MACxCJ,SAAS,gBAEX,4BAEF,uBAAK/B,UAAU,iBACb,sBACEoC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGf,GACC,gBAAC,EAAAvB,KAAI,CAACC,GAAIsB,EAASgB,OAAOC,KAAMC,IAAI,QAAO,KACtClB,EAASF,YAAYlB,QAI9B,0BACGqB,GACC,gBAAC,EAAAxB,KAAI,CAACC,GAAIuB,EAAKe,OAAOC,KAAMC,IAAI,QAC7BjB,EAAKH,YAAYlB,MAAM,SAM3B,C","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/topUI.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n//import { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  //const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      {/*{\" \"}\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      */}\n      {author?.name && (\n        <p>\n          <strong>{author.name}</strong> 이라고 합니다.\n          <br />\n          {author?.summary || null}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { Link } from \"gatsby\"\n\nfunction TopUI() {\n  return (\n    <div className=\"top-ui\">\n      <h4>\n        <Link to=\"/\">성훈 블로그</Link>\n      </h4>\n    </div>\n  )\n}\n\nexport default TopUI\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport TopUI from \"./topUI\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  /*let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }*/\n\n  return (\n    <div>\n      <TopUI />\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        <header className=\"global-header\">{}</header>\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <hr />\n        <br />\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["author","useStaticQuery","site","siteMetadata","className","name","summary","Link","to","location","title","children","isRootPath","pathname","Date","getFullYear","href","description","metaDescription","defaultTitle","content","property","social","twitter","Head","data","markdownRemark","post","frontmatter","excerpt","previous","next","siteTitle","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}