{"version":3,"file":"component---src-templates-tag-post-tsx-8e1288c6b8325340ab6a.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/TopUI.tsx","webpack://gatsby-starter-blog/./src/components/Layout.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/templates/tag-post.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { FC } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { Link } from \"gatsby\"\nimport { useEffect, useState } from \"react\"\n\ninterface ComponentProps {\n  setCurTag?(value: string): void\n}\n\nfunction TopUI({ setCurTag }: ComponentProps) {\n  const [scrollPercent, setScrollPercent] = useState(0)\n  const ORIGINAL = \"original\"\n  const REVERSED = \"reversed\"\n  const THEME_REVERSE = \"theme-reverse\"\n  const KEY_THEME = \"theme\"\n  const [preferDark, setPreferedDark] = useState(false)\n  const LIGHT_MODE = \"🌙\"\n  const DARK_MODE = \"🌙\"\n  const [curMode, setCurMode] = useState(\"\")\n\n  useEffect(() => {\n    document.addEventListener(\"scroll\", () => {\n      const currentScroll: number = document.documentElement.scrollTop\n      const totalScroll: number =\n        document.documentElement.scrollHeight -\n        document.documentElement.clientHeight\n      setScrollPercent((currentScroll * 100) / totalScroll)\n    })\n    if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      setPreferedDark(true)\n    }\n    setCurMode(\n      preferDark\n        ? localStorage.getItem(KEY_THEME) === REVERSED\n          ? LIGHT_MODE\n          : DARK_MODE\n        : localStorage.getItem(KEY_THEME) === REVERSED\n        ? DARK_MODE\n        : LIGHT_MODE\n    )\n  }, [])\n\n  return (\n    <div>\n      <div className=\"top-ui\">\n        <h5 className=\"top-ui-title\" style={{ margin: 0 }}>\n          <Link\n            to=\"/\"\n            onClick={() => {\n              if (setCurTag) setCurTag(\"ALL\")\n            }}\n          >\n            👍 조성개발실록\n          </Link>\n        </h5>\n        <div>\n          <div className=\"top-ui-tag\">\n            <div className=\"tooltip\">\n              <a\n                id=\"light-or-dark\"\n                onClick={() => {\n                  const theme = localStorage.getItem(KEY_THEME)\n                  if (!theme || theme === ORIGINAL) {\n                    document.body.classList.add(THEME_REVERSE)\n                    localStorage.setItem(KEY_THEME, REVERSED)\n                  } else {\n                    document.body.classList.remove(THEME_REVERSE)\n                    localStorage.setItem(KEY_THEME, ORIGINAL)\n                  }\n                  window.dispatchEvent(\n                    new StorageEvent(\"storage\", { key: KEY_THEME })\n                  )\n                  setCurMode(\n                    preferDark\n                      ? localStorage.getItem(KEY_THEME) === REVERSED\n                        ? LIGHT_MODE\n                        : DARK_MODE\n                      : localStorage.getItem(KEY_THEME) === REVERSED\n                      ? DARK_MODE\n                      : LIGHT_MODE\n                  )\n                }}\n              >\n                {curMode}\n              </a>\n              <div className=\"tooltip-text\">\n                {curMode === LIGHT_MODE ? \"다크모드\" : \"라이트모드\"}\n              </div>\n            </div>\n          </div>\n          <div className=\"top-ui-tag\" style={{ margin: \"0 20px 0 0\" }}>\n            <div className=\"tooltip\">\n              <Link to=\"/tag\">🏷️</Link>\n              <div className=\"tooltip-text\">태그</div>\n            </div>\n          </div>\n          {/* <div className=\"top-ui-tag\">\n            <div className=\"tooltip\">\n              <Link to=\"/til\">📝 </Link>\n              <div className=\"tooltip-text\">\n                <span className=\"smaller\">TIL</span>\n                <br />\n                <span className=\"x-small\">Today I Learned</span>\n              </div>\n            </div>\n          </div> */}\n          <div className=\"top-ui-tag\">\n            <div className=\"tooltip\">\n              <Link to=\"/visitor-log\">📝</Link>\n              <div className=\"tooltip-text\">방명록</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"progress-bar\"\n        style={{ width: `${scrollPercent}%` }}\n      ></div>\n    </div>\n  )\n}\n\nexport default TopUI\n","import * as React from \"react\"\nimport TopUI from \"./TopUI\"\nimport { FC } from \"react\"\nimport { useState } from \"react\"\n\ninterface ComponentProps {\n  location: any\n  children: any | undefined\n  setCurTag?(value: string): void\n}\n\nconst Layout = ({ location, children, setCurTag }: ComponentProps) => {\n  const rootPath = \"/\" //`${__PATH_PREFIX__}/`\n  const isRootPath = location?.pathname === rootPath\n\n  return (\n    <div>\n      <TopUI setCurTag={setCurTag} />\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        <header className=\"global-header\">{}</header>\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { FC } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\ninterface ComponentProps {\n  description: string\n  title: string\n  children?: any\n}\n\nconst Seo = ({ description, title, children }: ComponentProps) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n      <meta\n        name=\"google-site-verification\"\n        content=\"iP6AmcpYft1WcrX_A3DlYxkWH2bwT-mrYanTBB8vm4k\"\n      />\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/Layout\"\nimport Seo from \"../components/seo\"\nimport { FC } from \"react\"\n\ninterface Frontmatter {\n  date: string\n  title: string\n  description: string\n  tag: string[]\n}\n\ninterface MarkdownRemarkNode {\n  fields: {\n    slug: string\n  }\n  frontmatter: Frontmatter\n}\n\ninterface SiteMetadata {\n  title: string\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: SiteMetadata\n  }\n  allMarkdownRemark: {\n    nodes: MarkdownRemarkNode[]\n  }\n}\n\ninterface ComponentProps {\n  pageContext: {\n    tags: string\n  }\n  data: PageQueryData\n  location: any\n}\n\nconst TagPost = ({ pageContext, data, location }: ComponentProps) => {\n  const { tags } = pageContext\n  const posts = data.allMarkdownRemark.nodes\n  const tagHeader = \"All Tags\"\n  return (\n    <Layout location={location}>\n      <Seo title={tagHeader} description={tags} />\n      <div style={{ marginTop: \"100px\", marginBottom: \"100px\" }}>\n        <h2 style={{ paddingBottom: \"10px\", paddingTop: \"50px\" }}>\n          <span style={{ color: \"green\" }}>🔍 {tags}</span>\n          <span> 관련 게시글</span>\n          <hr></hr>\n        </h2>\n        {posts.map(post => {\n          return (\n            <div key={post.fields.slug}>\n              <h2>\n                <Link to={`${post.fields.slug}`}>{post.frontmatter.title}</Link>\n              </h2>\n              <p>{post.frontmatter.description}</p>\n            </div>\n          )\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nexport default TagPost\n\nexport const pageQuery = graphql`\n  query ($tags: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      limit: 2000\n      filter: { frontmatter: { tag: { in: [$tags] } } }\n    ) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tag\n        }\n      }\n    }\n  }\n`\n"],"names":["setCurTag","scrollPercent","setScrollPercent","useState","ORIGINAL","REVERSED","THEME_REVERSE","KEY_THEME","preferDark","setPreferedDark","LIGHT_MODE","DARK_MODE","curMode","setCurMode","useEffect","document","addEventListener","currentScroll","documentElement","scrollTop","totalScroll","scrollHeight","clientHeight","window","matchMedia","matches","localStorage","getItem","React","className","style","margin","Link","to","onClick","id","theme","body","classList","remove","setItem","add","dispatchEvent","StorageEvent","key","width","_ref","location","children","isRootPath","pathname","TopUI","Date","getFullYear","href","description","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_site$siteMetadata","name","content","property","_site$siteMetadata2","social","_site$siteMetadata2$s","twitter","pageContext","data","tags","posts","allMarkdownRemark","nodes","Layout","Seo","marginTop","marginBottom","paddingBottom","paddingTop","color","map","post","fields","slug","frontmatter"],"sourceRoot":""}