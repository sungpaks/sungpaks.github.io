{"version":3,"file":"component---src-pages-index-tsx-797aa69bd02578dcd93a.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/topUI.tsx","webpack://gatsby-starter-blog/./src/components/layout.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/components/bio.tsx","webpack://gatsby-starter-blog/./src/pages/index.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { FC } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { Link } from \"gatsby\"\nimport { useEffect, useState } from \"react\"\n\ninterface ComponentProps {\n  setCurTag?(value: string): void\n  scrollPercent: number\n}\n\nfunction TopUI({ setCurTag, scrollPercent }: ComponentProps) {\n  return (\n    <div>\n      <div className=\"top-ui\">\n        <h4 className=\"top-ui-title\" style={{ margin: 0 }}>\n          <Link\n            to=\"/\"\n            onClick={() => {\n              if (setCurTag) setCurTag(\"ALL\")\n            }}\n          >\n            üëç ÏÑ±Ìõà Î∏îÎ°úÍ∑∏\n          </Link>\n        </h4>\n        <h6 className=\"top-ui-tag\" style={{ margin: \"0 20px 0 0\" }}>\n          <Link to=\"/tag\">Tag</Link>\n        </h6>\n      </div>\n      <div\n        className=\"progress-bar\"\n        style={{ width: `${scrollPercent}%` }}\n      ></div>\n    </div>\n  )\n}\n\nexport default TopUI\n","import * as React from \"react\"\nimport TopUI from \"./topUI\"\nimport { FC } from \"react\"\nimport { useState } from \"react\"\n\ninterface ComponentProps {\n  location: any\n  children: any | undefined\n  setCurTag?(value: string): void\n  scrollPercent?: number\n}\n\nconst Layout = ({\n  location,\n  children,\n  setCurTag,\n  scrollPercent,\n}: ComponentProps) => {\n  const rootPath = \"/\" //`${__PATH_PREFIX__}/`\n  const isRootPath = location?.pathname === rootPath\n\n  return (\n    <div>\n      <TopUI\n        setCurTag={setCurTag}\n        scrollPercent={scrollPercent === undefined ? 0 : scrollPercent}\n      />\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        <header className=\"global-header\">{}</header>\n        <main>{children}</main>\n        <footer>\n          ¬© {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { FC } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\ninterface ComponentProps {\n  description: string\n  title: string\n  children?: any\n}\n\nconst Seo = ({ description, title, children }: ComponentProps) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { FC } from \"react\"\n//import { StaticImage } from \"gatsby-plugin-image\"\n\ninterface authorType {\n  name: string\n  summary: string\n}\n\ninterface quoteType {\n  author: string | null\n  content: string\n}\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const quote: quoteType[] = [\n    {\n      author: `Í¥¥ÌÖå`,\n      content: `ÏãúÏûëÌïòÎùº. Í∑∏ ÏûêÏ≤¥Í∞Ä Ï≤úÏû¨ÏÑ±Ïù¥Í≥† ÌûòÏù¥Î©∞, ÎßàÎ†•Ïù¥Îã§.`,\n    },\n    {\n      author: `Ï§ëÏö©`,\n      content: `ÎÇ®Ïù¥ Ìïú Î≤àÏóê Îä•ÌïòÍ±∞Îì† ÎÇòÎäî Î∞± Î≤àÏùÑ ÌïòÍ≥†,\n    ÎÇ®Ïù¥ Ïó¥ Î≤àÏóê Îä•ÌïòÍ±∞Îì† ÎÇòÎäî Ï≤ú Î≤àÏùÑ ÌïúÎã§.`,\n    },\n    { author: `ÎØ∏ÏÉÅ`, content: `ÏïÑÏπ®ÏóêÎäî ÍøàÏùÑ Ï†ÅÍ≥† Î∞§ÏóêÎäî Í≥ºÍ±∞Î•º Ï†ÅÏñ¥Îùº.` },\n    {\n      author: `Ïúå ÎìÄÎûÄÌä∏`,\n      content: `Í≥ºÍ±∞Î•º Í∏∞Î°ùÌïòÏßÄ ÏïäÎäî ÏÇ¨ÎûåÏùÄ ÎØ∏ÎûòÎ•º Ïì∏ Ïàò ÏóÜÎã§.`,\n    },\n    {\n      author: `Ïπº ÏÑ∏Ïù¥Í±¥`,\n      content: `Ïö∞Î¶¨Îäî Í∏∞Î°ùÏùÑ ÌÜµÌï¥ ÎØ∏ÎûòÎ•º ÏòàÏ∏°ÌïòÍ≥†, ÎØ∏ÎûòÎ•º ÌÜµÌï¥ Í∏∞Î°ùÏùÑ Ïù¥Ìï¥ÌïúÎã§.`,\n    },\n  ]\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author: authorType = data.site.siteMetadata?.author\n  //const social = data.site.siteMetadata?.social\n\n  const randomIndex: number = Math.floor(Math.random() * quote.length)\n  const randomQuote: quoteType = quote[randomIndex]\n  return (\n    <div>\n      <div className=\"bio\">\n        {/*{\" \"}\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      */}\n        <div>\n          {author?.name && (\n            <p>\n              <strong>{author.name}</strong> Ïù¥ÎùºÍ≥† Ìï©ÎãàÎã§.\n              <br />\n              {author?.summary || null}\n            </p>\n          )}\n        </div>\n      </div>\n      {/*<div className=\"bio-quote\">\n        <p>{randomQuote.content}</p>\n        <p style={{ fontSize: \"0.8rem\", textAlign: \"right\" }}>\n          - {randomQuote.author}\n        </p>\n      </div>*/}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { useState } from \"react\"\nimport { useEffect } from \"react\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { FC } from \"react\"\n\ninterface SiteMetadata {\n  title: string\n}\n\ninterface Frontmatter {\n  date: string\n  title: string\n  description: string\n  tag: string[]\n}\n\ninterface Fields {\n  slug: string\n}\n\ninterface MarkdownRemarkNode {\n  excerpt: string\n  fields: Fields\n  frontmatter: Frontmatter\n}\n\ninterface TagNode {\n  fieldValue: string\n  totalCount: number\n}\n\nexport interface PageQueryData {\n  site: {\n    siteMetadata: SiteMetadata\n  }\n  allMarkdownRemark: {\n    nodes: MarkdownRemarkNode[]\n  }\n  tags: {\n    group: TagNode[]\n  }\n}\n\ninterface ComponentProps {\n  data: PageQueryData\n  location: any\n}\n\nconst BlogIndex = ({ data, location }: ComponentProps) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n  const [curTag, setCurTag] = useState<string>(\"ALL\")\n  const [curPostList, setCurPostList] = useState<MarkdownRemarkNode[]>(posts)\n\n  useEffect(() => {\n    if (curTag === \"ALL\") {\n      setCurPostList([...posts])\n    } else {\n      setCurPostList([...posts.filter(p => p.frontmatter.tag.includes(curTag))])\n    }\n  }, [curTag])\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} setCurTag={setCurTag}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} setCurTag={setCurTag}>\n      <Bio />\n      <hr />\n      <ol style={{ listStyle: `none` }}>\n        {curPostList.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n          /*const categories = [\n            { fieldValue: ALL_NAME, totalCount: allPosts.length },\n            ...data.categories.group,\n          ]*/\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span\n                        itemProp=\"headline\"\n                        className=\"post-list-item-title\"\n                      >\n                        {title}\n                      </span>\n                    </Link>\n                  </h2>\n                </header>\n                {post.frontmatter.tag?.map(c => {\n                  return (\n                    <button\n                      className=\"custom-button tag-button\"\n                      onClick={() => {\n                        setCurTag(c === curTag ? \"ALL\" : c)\n                      }}\n                      style={{\n                        top: c === curTag ? \"2px\" : 0,\n                        color: c === curTag ? \"darkgray\" : \"black\",\n                      }}\n                    >\n                      {c}\n                    </button>\n                  )\n                })}\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n                <small>{post.frontmatter.date}</small>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n      <hr />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => (\n  <Seo title=\"All posts\" description=\"\" children={null} />\n)\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tag\n        }\n      }\n    }\n\n    tags: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tag) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"names":["setCurTag","scrollPercent","React","className","style","margin","Link","to","onClick","width","_ref","location","children","isRootPath","pathname","TopUI","undefined","Date","getFullYear","href","description","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_site$siteMetadata","name","content","property","_site$siteMetadata2","social","_site$siteMetadata2$s","twitter","quote","author","_data$site$siteMetada","Math","floor","random","length","summary","data","posts","allMarkdownRemark","nodes","curTag","useState","curPostList","setCurPostList","useEffect","filter","p","frontmatter","tag","includes","Layout","Bio","listStyle","map","post","fields","slug","key","itemScope","itemType","itemProp","_post$frontmatter$tag","c","top","color","dangerouslySetInnerHTML","__html","excerpt","date","Head","Seo"],"sourceRoot":""}