{"version":3,"file":"component---src-templates-tag-post-tsx-26ce25194538faa01304.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/topUI.tsx","webpack://gatsby-starter-blog/./src/components/layout.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/templates/tag-post.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { FC } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { Link } from \"gatsby\"\nimport { useEffect, useState } from \"react\"\n\ninterface ComponentProps {\n  setCurTag?(value: string): void\n}\n\nfunction TopUI({ setCurTag }: ComponentProps) {\n  const [scrollPercent, setScrollPercent] = useState(0)\n  window.addEventListener(\"scroll\", () => {\n    const currentScroll: number = document.documentElement.scrollTop\n    const totalScroll: number =\n      document.documentElement.scrollHeight -\n      document.documentElement.clientHeight\n    setScrollPercent(Math.round((currentScroll * 100) / totalScroll))\n  })\n  //useEffect(() => {}, [document.documentElement.scroll])\n\n  return (\n    <div>\n      <div className=\"top-ui\">\n        <h4 className=\"top-ui-title\" style={{ margin: 0 }}>\n          <Link\n            to=\"/\"\n            onClick={() => {\n              if (setCurTag) setCurTag(\"ALL\")\n            }}\n          >\n            üëç ÏÑ±Ìõà Î∏îÎ°úÍ∑∏\n          </Link>\n        </h4>\n        <h6 className=\"top-ui-tag\" style={{ margin: \"0 20px 0 0\" }}>\n          <Link to=\"/tag\">Tag</Link>\n        </h6>\n      </div>\n      <div\n        className=\"progress-bar\"\n        style={{ width: `${scrollPercent}%` }}\n      ></div>\n    </div>\n  )\n}\n\nexport default TopUI\n","import * as React from \"react\"\nimport TopUI from \"./topUI\"\nimport { FC } from \"react\"\n\ninterface ComponentProps {\n  location: any\n  children: any | undefined\n  setCurTag?(value: string): void\n}\n\nconst Layout = ({ location, children, setCurTag }: ComponentProps) => {\n  const rootPath = \"/\" //`${__PATH_PREFIX__}/`\n  const isRootPath = location?.pathname === rootPath\n\n  return (\n    <div>\n      <TopUI setCurTag={setCurTag} />\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        <header className=\"global-header\">{}</header>\n        <main>{children}</main>\n        <footer>\n          ¬© {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { FC } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\ninterface ComponentProps {\n  description: string\n  title: string\n  children?: any\n}\n\nconst Seo = ({ description, title, children }: ComponentProps) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { FC } from \"react\"\n\ninterface Frontmatter {\n  date: string\n  title: string\n  description: string\n  tag: string[]\n}\n\ninterface MarkdownRemarkNode {\n  fields: {\n    slug: string\n  }\n  frontmatter: Frontmatter\n}\n\ninterface SiteMetadata {\n  title: string\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: SiteMetadata\n  }\n  allMarkdownRemark: {\n    nodes: MarkdownRemarkNode[]\n  }\n}\n\ninterface ComponentProps {\n  pageContext: {\n    tags: string\n  }\n  data: PageQueryData\n  location: any\n}\n\nconst TagPost = ({ pageContext, data, location }: ComponentProps) => {\n  const { tags } = pageContext\n  const posts = data.allMarkdownRemark.nodes\n  const tagHeader = \"All Tags\"\n  console.log(data)\n  return (\n    <Layout location={location}>\n      <Seo title={tagHeader} description={tags} />\n      <div style={{ marginTop: \"100px\", marginBottom: \"100px\" }}>\n        <h2 style={{ paddingBottom: \"10px\", paddingTop: \"50px\" }}>\n          <span style={{ color: \"green\" }}>üîç {tags}</span>\n          <span> Í¥ÄÎ†® Í≤åÏãúÍ∏Ä</span>\n          <hr></hr>\n        </h2>\n        {posts.map(post => {\n          return (\n            <div>\n              <h2>\n                <Link to={`${post.fields.slug}`}>{post.frontmatter.title}</Link>\n              </h2>\n              <p>{post.frontmatter.description}</p>\n            </div>\n          )\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nexport default TagPost\n\nexport const pageQuery = graphql`\n  query ($tags: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      limit: 2000\n      filter: { frontmatter: { tag: { in: [$tags] } } }\n    ) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tag\n        }\n      }\n    }\n  }\n`\n"],"names":["setCurTag","scrollPercent","setScrollPercent","useState","window","addEventListener","currentScroll","document","documentElement","scrollTop","totalScroll","scrollHeight","clientHeight","Math","round","React","className","style","margin","Link","to","onClick","width","_ref","location","children","isRootPath","pathname","TopUI","Date","getFullYear","href","description","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_site$siteMetadata","name","content","property","_site$siteMetadata2","social","_site$siteMetadata2$s","twitter","pageContext","data","tags","posts","allMarkdownRemark","nodes","console","log","Layout","Seo","marginTop","marginBottom","paddingBottom","paddingTop","color","map","post","fields","slug","frontmatter"],"sourceRoot":""}