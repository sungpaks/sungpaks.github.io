{"version":3,"file":"component---src-pages-404-js-cf015903eba2ea4c5083.js","mappings":"uLA6BA,MApBA,SAAe,GAAgC,IAAhC,UAAEA,GAA2B,EAC1C,OACEC,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,UACbD,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,eAAeC,MAAO,CAAEC,UAAW,KAC/CH,EAAAA,cAACI,EAAAA,KAAI,CACHC,GAAG,IACHC,QAAS,KACHP,GAAWA,EAAU,MAAM,GAElC,cAIHC,EAAAA,cAAAA,KAAAA,CAAIC,UAAU,cACZD,EAAAA,cAACI,EAAAA,KAAI,CAACC,GAAG,QAAO,QAIxB,ECIA,MApBeE,IAAwD,IAAvD,SAAEC,EAAQ,SAAEC,EAAQ,UAAEV,GAA2B,EAC/D,MACMW,EADW,OACEF,aAAQ,EAARA,EAAUG,UAE7B,OACEX,EAAAA,cAAAA,MAAAA,KACEA,EAAAA,cAACY,EAAK,CAACb,UAAWA,IAClBC,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,iBAAiB,oBAAmBS,GACjDV,EAAAA,cAAAA,SAAAA,CAAQC,UAAU,kBAClBD,EAAAA,cAAAA,OAAAA,KAAOS,GACPT,EAAAA,cAAAA,SAAAA,KAAQ,MACH,IAAIa,MAAOC,cAAc,eAC5B,IACAd,EAAAA,cAAAA,IAAAA,CAAGe,KAAK,4BAA2B,YAGnC,C,+CC6BV,IAvCYR,IAAuD,IAAD,UAArD,YAAES,EAAW,MAAEC,EAAK,SAAER,GAA0B,EAC3D,MAAM,KAAES,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjBE,EAAmBN,MAExC,OACEjB,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAAAA,QAAAA,KAAQsB,EAAY,GAAMA,EAAiBL,GAC3CjB,EAAAA,cAAAA,OAAAA,CAAMwB,KAAK,cAAcC,QAASL,IAClCpB,EAAAA,cAAAA,OAAAA,CAAM0B,SAAS,WAAWD,QAASR,IACnCjB,EAAAA,cAAAA,OAAAA,CAAM0B,SAAS,iBAAiBD,QAASL,IACzCpB,EAAAA,cAAAA,OAAAA,CAAM0B,SAAS,UAAUD,QAAQ,YACjCzB,EAAAA,cAAAA,OAAAA,CAAMwB,KAAK,eAAeC,QAAQ,YAClCzB,EAAAA,cAAAA,OAAAA,CACEwB,KAAK,kBACLC,SAA0B,QAAjB,EAAAP,EAAKG,oBAAY,OAAQ,QAAR,EAAjBM,EAAmBC,cAAM,WAAR,EAAjBC,EAA2BC,UAAO,KAE7C9B,EAAAA,cAAAA,OAAAA,CAAMwB,KAAK,gBAAgBC,QAASR,IACpCjB,EAAAA,cAAAA,OAAAA,CAAMwB,KAAK,sBAAsBC,QAASL,IACzCX,EACA,C,kGC9CP,MAWasB,EAAO,IAAM,gBAAC,IAAG,CAACd,MAAM,mBAErC,UAbqB,IAAwB,IAAvB,KAAEe,EAAI,SAAExB,GAAU,EACtC,MAAMyB,EAAYD,EAAKd,KAAKG,aAAaJ,MAEzC,OACE,gBAAC,IAAM,CAACT,SAAUA,EAAUS,MAAOgB,GACjC,0BAAI,kBACJ,yBAAG,2DACI,C","sources":["webpack://gatsby-starter-blog/./src/components/topUI.tsx","webpack://gatsby-starter-blog/./src/components/layout.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/pages/404.js"],"sourcesContent":["import * as React from \"react\"\nimport { FC } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { Link } from \"gatsby\"\n\ninterface ComponentProps {\n  setCurTag?(value: string): void\n}\n\nfunction TopUI({ setCurTag }: ComponentProps) {\n  return (\n    <div className=\"top-ui\">\n      <h4 className=\"top-ui-title\" style={{ marginTop: 20 }}>\n        <Link\n          to=\"/\"\n          onClick={() => {\n            if (setCurTag) setCurTag(\"ALL\")\n          }}\n        >\n          üëç ÏÑ±Ìõà Î∏îÎ°úÍ∑∏\n        </Link>\n      </h4>\n      <h6 className=\"top-ui-tag\">\n        <Link to=\"/tag\">Tag</Link>\n      </h6>\n    </div>\n  )\n}\n\nexport default TopUI\n","import * as React from \"react\"\nimport TopUI from \"./topUI\"\nimport { FC } from \"react\"\nimport { pathPrefix } from \"../../gatsby-config\"\n\ninterface ComponentProps {\n  location: any\n  children: any | undefined\n  setCurTag?(value: string): void\n}\n\nconst Layout = ({ location, children, setCurTag }: ComponentProps) => {\n  const rootPath = \"/\" //`${__PATH_PREFIX__}/`\n  const isRootPath = location?.pathname === rootPath\n\n  return (\n    <div>\n      <TopUI setCurTag={setCurTag} />\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        <header className=\"global-header\">{}</header>\n        <main>{children}</main>\n        <footer>\n          ¬© {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { FC } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\ninterface ComponentProps {\n  description: string\n  title: string\n  children?: any\n}\n\nconst Seo = ({ description, title, children }: ComponentProps) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst NotFoundPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>404: Not Found</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"404: Not Found\" />\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"names":["setCurTag","React","className","style","marginTop","Link","to","onClick","_ref","location","children","isRootPath","pathname","TopUI","Date","getFullYear","href","description","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_site$siteMetadata","name","content","property","_site$siteMetadata2","social","_site$siteMetadata2$s","twitter","Head","data","siteTitle"],"sourceRoot":""}