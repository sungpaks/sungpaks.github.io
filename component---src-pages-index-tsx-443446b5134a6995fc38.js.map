{"version":3,"file":"component---src-pages-index-tsx-443446b5134a6995fc38.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/topUI.tsx","webpack://gatsby-starter-blog/./src/components/layout.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/components/bio.tsx","webpack://gatsby-starter-blog/./src/pages/index.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { FC } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { Link } from \"gatsby\"\nimport { useEffect, useState } from \"react\"\n\ninterface ComponentProps {\n  setCurTag?(value: string): void\n}\n\nfunction TopUI({ setCurTag }: ComponentProps) {\n  const [scrollPercent, setScrollPercent] = useState(0)\n  document.addEventListener(\"scroll\", () => {\n    const currentScroll: number = document.documentElement.scrollTop\n    const totalScroll: number =\n      document.documentElement.scrollHeight -\n      document.documentElement.clientHeight\n    setScrollPercent(Math.round((currentScroll * 100) / totalScroll))\n  })\n  //useEffect(() => {}, [document.documentElement.scroll])\n\n  return (\n    <div>\n      <div className=\"top-ui\">\n        <h4 className=\"top-ui-title\" style={{ margin: 0 }}>\n          <Link\n            to=\"/\"\n            onClick={() => {\n              if (setCurTag) setCurTag(\"ALL\")\n            }}\n          >\n            👍 성훈 블로그\n          </Link>\n        </h4>\n        <h6 className=\"top-ui-tag\" style={{ margin: \"0 20px 0 0\" }}>\n          <Link to=\"/tag\">Tag</Link>\n        </h6>\n      </div>\n      <div\n        className=\"progress-bar\"\n        style={{ width: `${scrollPercent}%` }}\n      ></div>\n    </div>\n  )\n}\n\nexport default TopUI\n","import * as React from \"react\"\nimport TopUI from \"./topUI\"\nimport { FC } from \"react\"\n\ninterface ComponentProps {\n  location: any\n  children: any | undefined\n  setCurTag?(value: string): void\n}\n\nconst Layout = ({ location, children, setCurTag }: ComponentProps) => {\n  const rootPath = \"/\" //`${__PATH_PREFIX__}/`\n  const isRootPath = location?.pathname === rootPath\n\n  return (\n    <div>\n      <TopUI setCurTag={setCurTag} />\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        <header className=\"global-header\">{}</header>\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { FC } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\ninterface ComponentProps {\n  description: string\n  title: string\n  children?: any\n}\n\nconst Seo = ({ description, title, children }: ComponentProps) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { FC } from \"react\"\n//import { StaticImage } from \"gatsby-plugin-image\"\n\ninterface authorType {\n  name: string\n  summary: string\n}\n\ninterface quoteType {\n  author: string | null\n  content: string\n}\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const quote: quoteType[] = [\n    {\n      author: `괴테`,\n      content: `시작하라. 그 자체가 천재성이고 힘이며, 마력이다.`,\n    },\n    {\n      author: `중용`,\n      content: `남이 한 번에 능하거든 나는 백 번을 하고,\n    남이 열 번에 능하거든 나는 천 번을 한다.`,\n    },\n    { author: `미상`, content: `아침에는 꿈을 적고 밤에는 과거를 적어라.` },\n    {\n      author: `윌 듀란트`,\n      content: `과거를 기록하지 않는 사람은 미래를 쓸 수 없다.`,\n    },\n    {\n      author: `칼 세이건`,\n      content: `우리는 기록을 통해 미래를 예측하고, 미래를 통해 기록을 이해한다.`,\n    },\n  ]\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author: authorType = data.site.siteMetadata?.author\n  //const social = data.site.siteMetadata?.social\n\n  const randomIndex: number = Math.floor(Math.random() * quote.length)\n  const randomQuote: quoteType = quote[randomIndex]\n  return (\n    <div>\n      <div className=\"bio\">\n        {/*{\" \"}\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      */}\n        <div>\n          {author?.name && (\n            <p>\n              <strong>{author.name}</strong> 이라고 합니다.\n              <br />\n              {author?.summary || null}\n            </p>\n          )}\n        </div>\n      </div>\n      {/*<div className=\"bio-quote\">\n        <p>{randomQuote.content}</p>\n        <p style={{ fontSize: \"0.8rem\", textAlign: \"right\" }}>\n          - {randomQuote.author}\n        </p>\n      </div>*/}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { useState } from \"react\"\nimport { useEffect } from \"react\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { FC } from \"react\"\n\ninterface SiteMetadata {\n  title: string\n}\n\ninterface Frontmatter {\n  date: string\n  title: string\n  description: string\n  tag: string[]\n}\n\ninterface Fields {\n  slug: string\n}\n\ninterface MarkdownRemarkNode {\n  excerpt: string\n  fields: Fields\n  frontmatter: Frontmatter\n}\n\ninterface TagNode {\n  fieldValue: string\n  totalCount: number\n}\n\nexport interface PageQueryData {\n  site: {\n    siteMetadata: SiteMetadata\n  }\n  allMarkdownRemark: {\n    nodes: MarkdownRemarkNode[]\n  }\n  tags: {\n    group: TagNode[]\n  }\n}\n\ninterface ComponentProps {\n  data: PageQueryData\n  location: any\n}\n\nconst BlogIndex = ({ data, location }: ComponentProps) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n  const [curTag, setCurTag] = useState<string>(\"ALL\")\n  const [curPostList, setCurPostList] = useState<MarkdownRemarkNode[]>(posts)\n  useEffect(() => {\n    if (curTag === \"ALL\") {\n      setCurPostList([...posts])\n    } else {\n      setCurPostList([...posts.filter(p => p.frontmatter.tag.includes(curTag))])\n    }\n  }, [curTag])\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} setCurTag={setCurTag}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} setCurTag={setCurTag}>\n      <Bio />\n      <hr />\n      <ol style={{ listStyle: `none` }}>\n        {curPostList.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n          /*const categories = [\n            { fieldValue: ALL_NAME, totalCount: allPosts.length },\n            ...data.categories.group,\n          ]*/\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span\n                        itemProp=\"headline\"\n                        className=\"post-list-item-title\"\n                      >\n                        {title}\n                      </span>\n                    </Link>\n                  </h2>\n                </header>\n                {post.frontmatter.tag?.map(c => {\n                  return (\n                    <button\n                      className=\"custom-button tag-button\"\n                      onClick={() => {\n                        setCurTag(c === curTag ? \"ALL\" : c)\n                      }}\n                      style={{\n                        top: c === curTag ? \"2px\" : 0,\n                        color: c === curTag ? \"darkgray\" : \"black\",\n                      }}\n                    >\n                      {c}\n                    </button>\n                  )\n                })}\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n                <small>{post.frontmatter.date}</small>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n      <hr />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => (\n  <Seo title=\"All posts\" description=\"\" children={null} />\n)\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tag\n        }\n      }\n    }\n\n    tags: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tag) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"names":["setCurTag","scrollPercent","setScrollPercent","useState","document","addEventListener","currentScroll","documentElement","scrollTop","totalScroll","scrollHeight","clientHeight","Math","round","React","className","style","margin","Link","to","onClick","width","_ref","location","children","isRootPath","pathname","TopUI","Date","getFullYear","href","description","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_site$siteMetadata","name","content","property","_site$siteMetadata2","social","_site$siteMetadata2$s","twitter","quote","author","_data$site$siteMetada","floor","random","length","summary","data","posts","allMarkdownRemark","nodes","curTag","curPostList","setCurPostList","useEffect","filter","p","frontmatter","tag","includes","Layout","Bio","listStyle","map","post","fields","slug","key","itemScope","itemType","itemProp","_post$frontmatter$tag","c","top","color","dangerouslySetInnerHTML","__html","excerpt","date","Head","Seo"],"sourceRoot":""}