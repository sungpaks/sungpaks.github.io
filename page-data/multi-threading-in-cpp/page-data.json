{"componentChunkName":"component---src-templates-blog-post-js","path":"/multi-threading-in-cpp/","result":{"data":{"site":{"siteMetadata":{"title":"성훈 블로그"}},"markdownRemark":{"id":"db93ec6a-4556-5de7-87a4-797032932351","excerpt":"저번학기에 게임 만드는 팀플이 있었는데요 처음에는 C로 시작했고 나중에 C++로 확장했지만 사실 사용중인 이미지 렌더링 라이브러리가 C로 작성된거기도 하고 해서 아무튼 시작은 C…","html":"<p>저번학기에 게임 만드는 팀플이 있었는데요<br>\n처음에는 C로 시작했고 나중에 C++로 확장했지만<br>\n사실 사용중인 이미지 렌더링 라이브러리가 C로 작성된거기도 하고 해서<br>\n아무튼 시작은 C였고 멀티스레딩은 생각을 해두지 않았었습니다<br>\n그럼 이제 문제가 뭐냐 모든 동작이 순차적이라는 것인데요</p>\n<p>예를 들어 가장 문제점은<br>\n게임에서는 땅을 파는 함수가 있는데<br>\n이 함수에서는 진동 모션과 블록의 파괴 등까지 해서 한 동작에 렌더링이 최소 5번 일어납니다</p>\n<p>아래의 진동 모션이야말로 주범인데<br>\n<img src=\"https://i.imgur.com/05czAG6.png\" width=\"100%\">\n앞뒤로 왔다갔다를 보여줘야 하니 렌더링이 다다닥 있습니다<br>\n맥북을 쓰는 팀원분은 렌더링이 빨라서 체감이 크지 않는데<br>\n제 윈트북은 개느려서 이 렌더링 세 번에 걸리는 시간이 상당히 크고 그동안 다른 동작에 도달하지 못하니 NPC들은 멈춰있고 그렇습니다</p>\n<h3>그래서 어케함??</h3>\n<p>그래서 이 땅 파는 함수 <code class=\"language-text\">dig</code>을 다른 스레드에서 실행하고자 했습니다<br>\n먼저 그러려면 <code class=\"language-text\">#include &lt;thread></code>로 스레드 헤더를 가져옵니다<br>\n이제 스레드 객체를 <code class=\"language-text\">thread myThread(함수포인터, 객체, 인자, 인자, ... )</code>와 같이 생성해줍니다.<br>\n예를 들어, 제 경우 <code class=\"language-text\">pc.dig(x, y);</code>에 대한 스레드 객체를 생성하기 위해<br>\n<code class=\"language-text\">thread digThread(&amp;PC::dig, &amp;pc, x, y);</code> 이렇게 작성했습니다</p>\n<p>이제 두 가지 선택지가 있는데</p>\n<ul>\n<li><code class=\"language-text\">myThread.join()</code> : 메인스레드는 저거 끝나기를 기다림</li>\n<li><code class=\"language-text\">myThread.detach()</code> : 메인스레드와 분리시켜 백그라운드 작업을 시키고, 메인스레드는 할 일 하러 간다</li>\n</ul>\n<p>메인스레드는 계속 일하고 <code class=\"language-text\">dig</code>만 따로 실행하면 좋겠으니, <code class=\"language-text\">detach</code>합니다\n<br/>\n<br/></p>\n<h3>주의..</h3>\n<p>해야 할 점이 있었는데\n<code class=\"language-text\">switch</code>의 <code class=\"language-text\">case</code>문 내에서 thread 변수를 만드니까 <code class=\"language-text\">thread 초기화가 case레이블에 의해 생략되었습니다.</code> 뭐 이런 에러가 발생합니다<br>\n<code class=\"language-text\">case</code>문 내부에서 변수를 선언한게 문제인데,</p>\n<ul>\n<li>\n<p><code class=\"language-text\">switch</code>시작 전에 변수 선언하거나</p>\n</li>\n<li>\n<p><code class=\"language-text\">case</code>문을 중괄호 <code class=\"language-text\">{}</code>로 묶거나\n둘 중 하나 선택해서 해결할 수 있습니다</p>\n<p>대신 후자의 방식은 당연히 scope가 중괄호 내부로 제한되니 그 안에서만 사용할 수 있습니다\n<img src=\"https://i.imgur.com/MuWI0wV.png\" width=\"100%\"></p>\n</li>\n</ul>\n<h3>동기화</h3>\n<p>그리고 이제 연산이 일부 병렬적이므로 자원에 동시에 접근하고 수정하게 될 수도 있습니다..<br>\n따라서 동기화하려면<br>\n여러 방법이 있는 것 같은데 저는 <code class=\"language-text\">std::mutex</code>를 쓰는 방법을 택했습니다</p>\n<p><code class=\"language-text\">#include &lt;mutex></code>로 먼저 뮤텍스를 가져오신 다음에<br>\n전역에 <code class=\"language-text\">std::mutex m</code>과 같이 뮤텍스를 하나 생성해줍니다<br>\n이제 동기화하려는 코드 앞뒤로 <code class=\"language-text\">m.lock()</code>, <code class=\"language-text\">m.unlock()</code>을 써서 감싸줍니다<br>\n대충 이런 식\n<img src=\"https://i.imgur.com/cSbhn7L.png\" width=\"100%\"></p>\n<p>그럼 짜잔</p>\n<p>..</p>\n<p>..</p>\n<p>..</p>\n<p>..</p>\n<p>딱히 보여줄 자료는 없고요.. 확실히 효과있었습니다</p>\n<p>처음부터 멀티스레딩을 염두에 두고 개발했으면 좋았을걸 싶네요 아쉽습니다<br>\n전부 갈아엎을 수도 없는 노릇이라 그냥 .. 부분적으로만 스레드를 분리했었네요</p>\n<p>이만 마칩니다.</p>","frontmatter":{"title":"👥 C++ 멀티스레딩 맛 한번 보세요","date":"January 03, 2024","description":"말씀중에 죄송하지만, C++에서도 멀티스레딩 쉽습니다"}},"previous":{"fields":{"slug":"/github-blog-using-gatsby/"},"frontmatter":{"title":"✒️ 내 동년배들 다 깃허브 블로그 운영한다"}},"next":null},"pageContext":{"id":"db93ec6a-4556-5de7-87a4-797032932351","previousPostId":"696a5bc7-ebed-59cf-ad14-023eb3c514da","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}