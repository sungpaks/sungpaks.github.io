{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/javascript-promise/","result":{"data":{"site":{"siteMetadata":{"title":"성훈 블로그"}},"markdownRemark":{"id":"85d95ab3-ff2a-5e8e-854c-c2749b9a2a15","excerpt":"…","html":"<p>저번 시간에는<br>\n비동기 작업이 끝나는 타이밍을 외부에서는 알 방법이 마땅치 않기 때문에,<br>\n콜백 함수, 즉 \"그거 끝나면 할 일\"를 넘겨주는 일련의 과정을 살펴봤었죠?</p>\n<p>그런데 비동기 작업이 진행 중이거나, 완료되었다거나, 등의 상태를 알 수 있다면 해결되는 문제 아닐까요?<br>\n그래서 자바스크립트에서 지원하게 된 것이<br>\n<strong>작업의 상태를 나타내는 객체</strong>인 <strong>Promise</strong>입니다</p>\n<h1>Promise란</h1>\n<blockquote>\n<p>Promise 객체는 비동기 작업이 맞이할 미래의 완료 또는 실패와 그 결과 값을 나타냅니다.</p>\n</blockquote>\n<p>Promise 객체의 상태는 아래와 같이 세 가지로 나뉩니다 :</p>\n<ul>\n<li>pending : 작업이 진행중..</li>\n<li>fulfilled : 작업이 성공적으로 완료됨</li>\n<li>rejected : 작업 중 오류 발생</li>\n</ul>\n<img src=\"https://i.imgur.com/4nXQXJY.png\" alt=\"\" loading=\"lazy\" width=\"60%\">\n<p>Promise 대충 아래와 같이, 생성자에 <code class=\"language-text\">executor</code>(실행자)를 전달하여 만듭니다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myPromise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* 성공적 */</span><span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* 예외 */</span><span class=\"token punctuation\">)</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>실행함수인 <code class=\"language-text\">executor</code>에는 <code class=\"language-text\">resolve</code>와 <code class=\"language-text\">reject</code>를 인수로 넘겨야 하는데, 이는 JavaScript에서 제공하는 콜백함수입니다.</p>\n<ul>\n<li>resolve(value) : 작업이 성공적으로 완료된 경우, 그 결과인 <code class=\"language-text\">value</code>와 함께 호출합니다.</li>\n<li>reject(error) : 작업 도중 에러 발생 시, 에러 객체인 <code class=\"language-text\">error</code>와 함께 호출합니다.</li>\n</ul>\n<p>개발자는 Promise 내에 일련의 작업들을 작성하고, 성공/실패 여부에 따라 <code class=\"language-text\">resolve/reject</code>를 호출하기만 하면 됩니다.</p>\n<h1>Promise 활용</h1>\n<p>이제 사용을 해봅시다<br>\n작업이 성공적으로 완료된 경우 <code class=\"language-text\">then</code>블록으로 넘어가며,<br>\n오류가 발생한 경우 <code class=\"language-text\">catch</code>블록으로 넘어갑니다. <br>\n마치 try-catch 구문 같네요</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">myPromise\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//비동기작업 뒤에 와야 할 작업</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//오류 시 작업</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>아까 Promise 생성자의 <code class=\"language-text\">executor</code>에서,<br>\n<code class=\"language-text\">resolve</code>에서는 인자로 <code class=\"language-text\">value</code>를,<br>\n<code class=\"language-text\">reject</code>에서는 인자로 <code class=\"language-text\">error</code>를 넘겼었죠?<br>\n이 각각을 위와 같이 <code class=\"language-text\">then</code>과 <code class=\"language-text\">catch</code>블록의 첫 번째 인자로 받을 수 있습니다</p>\n<p>다음과 같이 인자로 <code class=\"language-text\">time</code>을 전달하고, <code class=\"language-text\">time</code>만큼 기다린 후 <code class=\"language-text\">console.log</code>를 찍는 비동기 처리 과정 예제를 살펴보겠습니다 :</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">waitFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> time <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"양수를 넣어주세요 ㅜㅜㅜ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ms 기다렸습니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">ms 기다리기 성공!!!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">waitFunction</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>waitFunction이 반환하는 Promise 객체는,<br>\n유효하지 않은 값이라면 <code class=\"language-text\">reject</code>를 호출하기 때문에 <code class=\"language-text\">catch</code>블록으로,<br>\n성공적으로 실행한 후에는 <code class=\"language-text\">then</code>블록으로 향합니다.</p>\n<p>이 때, <code class=\"language-text\">then()</code>에서는 새로운 <code class=\"language-text\">Promise</code> 객체가 반환되므로, 연쇄으로 체이닝을 적용할 수 있습니다.<br>\n또한 try-catch블럭에서 으레 하듯이, 성공/실패 여부에 관계없이 마지막에 무조건 실행할 작업이 있는 경우 <code class=\"language-text\">finally</code>블록을 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* !!! */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ~~~ */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 <code class=\"language-text\">then()</code>에서 새로운 <code class=\"language-text\">Promise</code>객체가 반환됨을 이용한 체이닝은 비동기 작업 시 후속 작업들을 줄세우기 용이하게 해줍니다.</p>\n<p>그런데 이것도 좀 100% 만족스럽지는 않아보이네요..<br>\n어디에서 에러가 발생하여 <code class=\"language-text\">catch</code>문으로 넘어왔는지 알아채기 힘들다거나,<br>\nscope가 각각 다르기 때문에 어떤 값을 공유하기도 애매할 수 있을 것 같고요</p>\n<p>물론 <code class=\"language-text\">Promise</code>도 좋지만.. 이러한 이유로 이후에 새로운게 생겨났습니다<br>\n<code class=\"language-text\">async/await</code>인데요<br>\n다음에 알아보겠습니다</p>\n<p>이만 마칩니다</p>","frontmatter":{"title":"🤙 자바스크립트의 비동기 작업과 Promise","date":"March 10, 2024","description":"JavaScript 비동기 작업 2탄입니다","tag":["JavaScript"]}},"previous":{"fields":{"slug":"/asynchronous-and-callback/"},"frontmatter":{"title":"⏯️ 자바스크립트의 비동기 작업과 콜백함수"}},"next":null},"pageContext":{"id":"85d95ab3-ff2a-5e8e-854c-c2749b9a2a15","previousPostId":"f53f2f4b-78cd-5556-9bd0-ae483b98f760","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}