{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/r3f-postprocessing-tonemapping-issue/","result":{"data":{"site":{"siteMetadata":{"title":"조성개발실록"}},"markdownRemark":{"id":"6615b2aa-f547-581c-b867-9790f5cfb16e","excerpt":"아래에 해당한다면 저랑 같은 문제를 겪고 계실 확률이 높습니다 렌더러에  설정이 있는 경우 (이 아닌)  설정을 안했지만 React-Three/Fiber를 사용중인 경우 바로 결론이 필요하시면 해결로 넘어가세요 문제상황 Three.js + React Three Fiber를 사용한 3D…","html":"<p>아래에 해당한다면 저랑 같은 문제를 겪고 계실 확률이 높습니다</p>\n<ul>\n<li>렌더러에 <code class=\"language-text\">toneMapping</code> 설정이 있는 경우 (<code class=\"language-text\">NoToneMapping</code>이 아닌)</li>\n<li><code class=\"language-text\">NoToneMapping</code> 설정을 안했지만 React-Three/Fiber를 사용중인 경우</li>\n</ul>\n<p>바로 결론이 필요하시면 <a href=\"#%ED%95%B4%EA%B2%B0\">해결</a>로 넘어가세요</p>\n<h1 id=\"문제상황\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9\" aria-label=\"문제상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제상황</h1>\n<p>Three.js + React Three Fiber를 사용한 3D Viewer를 개발하고 있는데요<br>\n오브젝트(Mesh)를 선택하면 해당 물체에 윤곽선을 보여주는 효과가 필요했습니다.</p>\n<p><img src=\"https://i.imgur.com/vKMator.png\" alt=\"오브젝트 선택 Outline\"></p>\n<p>대충 이런 식으로요.(저건 그냥 <a href=\"/postprocessing-demo/\">데모</a>입니다)<br>\n이런거는 Three.js에서 Postprocessing중에 <a href=\"https://threejs.org/examples/webgl_postprocessing_outline.html\">OutlinePass</a>를 사용하여 구현해볼 수 있습니다<br>\n또는 React Three Fiber(r3f)를 사용한다면 <a href=\"https://github.com/pmndrs/react-postprocessing\">@react-three/postprocessing</a>패키지에서 <a href=\"https://react-postprocessing.docs.pmnd.rs/effects/outline\"><code class=\"language-text\">&lt;Outline /></code></a>을 사용할 수도 있구요</p>\n<p>아무튼간에, 그렇게 postprocessing을 사용하여 Outline효과를 적용했는데</p>\n<p><img src=\"https://i.imgur.com/OX27k4C.png\" alt=\"postprocessing 전/후\"></p>\n<p>이렇게 postprocessing을 적용한 전과 후로 전체 씬의 색감(톤이라고 해야 할 듯)이 변해버리는 불상사가 발생했습니다<br>\n씬이 확 밝아졌어요 ..</p>\n<p><img src=\"https://i.imgur.com/zOhcQvk.png\" alt=\"눈부셔\"></p>\n<p><a href=\"/postprocessing-demo\">데모</a>에서 확인해보실 수도 있는데, 우상단 컨트롤패널을 아래와 같이 기본 상태로 두고 메쉬 아무데나 클릭해보세요</p>\n<p><img src=\"https://i.imgur.com/X5AQSFB.png\" alt=\"데모 기본 옵션\"></p>\n<h1 id=\"원인을-찾아-다이브\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%9D%B8%EC%9D%84-%EC%B0%BE%EC%95%84-%EB%8B%A4%EC%9D%B4%EB%B8%8C\" aria-label=\"원인을 찾아 다이브 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원인을 찾아 다이브</h1>\n<p>아무래도 아래와 같은 <code class=\"language-text\">EffectComposer</code>(postprocessing 코드)를 넣었을 때 문제인 것으로 보였어요</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">{</span>\n  selectedMeshes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EffectComposer</span></span> <span class=\"token attr-name\">multisampling</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">8</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">autoClear</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Outline</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">EffectComposer</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그래서 이 <code class=\"language-text\">EffectComposer</code> 관련하여 저와 비슷한 현상을 겪은 사람의 <a href=\"https://github.com/pmndrs/postprocessing/discussions/436\">Github Discussion (@react-three/postprocessing)</a>을 찾았습니다</p>\n<p><img src=\"https://i.imgur.com/MKUz22a.png\" alt=\"Github Discussion - EffectComposer 이슈\"></p>\n<blockquote>\n<p>@react-three/postprocessing의 예제에서 EffectComposer를 사용하면 배경 색이 약간 변하는 것을 발견했습니다.</p>\n</blockquote>\n<p>이에 대한 해답을 찾았다며 질문자분이 자문자답 해주셨는데..</p>\n<p><img src=\"https://i.imgur.com/GqKImGq.png\" alt=\"Discussion - Marked as answer\"></p>\n<p>그냥 단순히 <code class=\"language-text\">&lt;Canvas></code>에 <code class=\"language-text\">linear</code> prop을 넣으면 된다고 했지만? 당연히 그렇게 쉽게 해결되지가 않았습니다..<br>\n<a href=\"https://r3f.docs.pmnd.rs/api/canvas\">r3f canvas 문서</a>에서 <code class=\"language-text\">linear</code> prop에 대해, \"자동 <strong>sRGB 색공간</strong>과 <strong>감마보정</strong>을 끕니다.\"라고 되어있는데<br>\n밑에서 알아봅시다.<br>\n그 전에 먼저 Postprocessing에 대해 살짝 훑구요</p>\n<h2 id=\"포스트프로세싱과-효과-체인-postprocessing--effect-chain\" style=\"position:relative;\"><a href=\"#%ED%8F%AC%EC%8A%A4%ED%8A%B8%ED%94%84%EB%A1%9C%EC%84%B8%EC%8B%B1%EA%B3%BC-%ED%9A%A8%EA%B3%BC-%EC%B2%B4%EC%9D%B8-postprocessing--effect-chain\" aria-label=\"포스트프로세싱과 효과 체인 postprocessing  effect chain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>포스트프로세싱과 효과 체인 (Postprocessing &#x26; Effect Chain)</h2>\n<p>포스트프로세싱은 한국어로 <strong>후처리</strong>인 그 이름처럼, <em>렌더링된 후의 output을 다시 input으로 받아 다양한 효과</em>를 적용합니다<br>\n이 때 <strong>Pass</strong>와 <strong>Effect</strong>라는 개념을 추가하는데</p>\n<ul>\n<li>Pass는 처리 단계의 단위로, 하나의 Pass마다 화면 전체를 다시 렌더링합니다.</li>\n<li>Effect는 Pass 안에서 실제로 적용되는 효과 알고리즘입니다.</li>\n</ul>\n<p>예를 들어, Three.js에서는 아래와 같이 3단계(Pass)로 효과(Effect)를 적용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> composer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EffectComposer</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncomposer<span class=\"token punctuation\">.</span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RenderPass</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncomposer<span class=\"token punctuation\">.</span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EffectPass</span><span class=\"token punctuation\">(</span>camera<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BloomEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncomposer<span class=\"token punctuation\">.</span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EffectPass</span><span class=\"token punctuation\">(</span>camera<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://i.imgur.com/zlHVr23.png\" alt=\"포스트프로세싱 단계\"></p>\n<p>이 때 주의할 점은 <em>이전의 연산결과가 곧 다음 연산의 재료가 되므로 순서에 유의</em>합니다.<br>\n이러한 <strong>렌더 -> 포스트프로세싱 -> 출력 순서</strong>의 파이프라인을 <strong>효과 체인(Effect Chain)</strong> 이라고 합니다.<br>\n예를 들어, 아까 <em>렌더링된 output을 다시 input</em>으로 넣어야한다고 했습니다. 그러니 <code class=\"language-text\">RenderPass(scene, camera)</code>가 가장 앞서야겠죠?</p>\n<h2 id=\"색공간과-감마보정-colorspace--gamma-correction\" style=\"position:relative;\"><a href=\"#%EC%83%89%EA%B3%B5%EA%B0%84%EA%B3%BC-%EA%B0%90%EB%A7%88%EB%B3%B4%EC%A0%95-colorspace--gamma-correction\" aria-label=\"색공간과 감마보정 colorspace  gamma correction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>색공간과 감마보정 (ColorSpace &#x26; Gamma Correction)</h2>\n<p>사실 색공간에 대해서 이야기하기에는 꽤 긴 이야기긴한데요..<br>\n자세한 설명은 <a href=\"https://en.wikipedia.org/wiki/CIE_1931_color_space\">위키</a>나 <a href=\"https://threejs.org/manual/#en/color-management\">Three.js - ColorSpace</a>문서를 읽어보시고, 간단히 넘어가봅시다</p>\n<p>우리는 색상을 보통 빨강, 초록, 파랑 세 가지 RGB를 똑같이 0~255 사이의 값으로 나타내 색상을 표현(RGB색상시스템)하지만,<br>\n사실 인간의 색상지각은 그렇게 딱 떨어지지가 않습니다. <a href=\"https://ko.wikipedia.org/wiki/%EC%83%89%EC%B1%84_%EC%A7%80%EA%B0%81\">색채 지각</a>참조.</p>\n<figure>\n<p><img src=\"https://i.imgur.com/dkJDtDL.png\" alt=\"CIE 1931\"></p>\n<figcaption>CIE 1931 색공간의 색도분포표.</figcaption>\n</figure>\n<p>대충 이런식으로 인간의 인지 범위가 있는데<br>\n색상을 RGB로 나타내려면 이 중에서 적당히 골라서 빨강, 초록, 파랑으로 사용해야 합니다.</p>\n<p><img src=\"https://i.imgur.com/6lFFqfP.png\" alt=\"색도분포표에서 세 점을 찍어 RGB선택\"></p>\n<p>예를 들어 맘대로 그냥 본인이 만드는 모니터의 색상시스템을 오른쪽처럼 해버릴 수도 있는거구요</p>\n<p>근데 매번 다르면 아주 열받으니까 RGB 시스템의 국룰을 만들었고 이를 <strong>sRGB(standard RGB)</strong> 라고 부릅니다.</p>\n<figure>\n<p><img src=\"https://i.imgur.com/Wap01zj.png\" alt=\"sRGB in CIE 1931 chromaticity diagram\"></p>\n<figcaption>sRGB color & white point (D65) - CIE 1931 chromaticity diagram.</figcaption>\n</figure>\n<p>이러고나면 색공간에서 수치값으로(또는 반대로)매핑하는 방식이 고민입니다<br>\n예를 들어 <code class=\"language-text\">R=1.0</code>이 <code class=\"language-text\">R=0.5</code>보다 물리적으로 2배 밝다고 봐야할까요? 또는 인간의 눈으로 인지되는 밝기가 2배 높다고 봐야할까요?<br>\n이는 분명히 다르고, 목적에 따라 양쪽 중 어떤 한 방식을 선택할 수 있습니다.</p>\n<p>이 때 <strong>물리량이 기준이면 선형(linear), 인간의 인지가 기준이면 비선형(non-linear)</strong> 이라고 부릅니다.<br>\n또한 선형 값을 -> 비선형으로 변환/보정하는 과정을 <strong>감마 보정(Gamma Correction)</strong> 이라고 합니다.<br>\n실제로 인간의 눈은 어두운 영역에 민감하고 밝은 영역에 둔해서, 선형 값을 그대로 디스플레이에 출력해버리면 전체적으로 확 어둡다고 느껴버립니다.</p>\n<p><img src=\"https://i.imgur.com/I65QpWc.png\" alt=\"안보여용\"></p>\n<p>Three.js에서는 렌더러의 outputColorSpace를 <code class=\"language-text\">SRGBColorSpace</code>(비선형 sRGB)와 <code class=\"language-text\">LinearSRGBColorSpace</code>(선형 sRGB)두 가지 중 하나로 설정할 수 있습니다.<br>\n위에서 언급한것처럼 <code class=\"language-text\">SRGBColorSpace</code>일 때 비선형 보정되어 인간이 보기에 자연스럽다고 느끼고,<br>\n<code class=\"language-text\">LinearSRGBColorSpace</code>는 물리적 광도에 대해 선형적이므로 부자연스럽다고 느낍니다.<br>\n아래의 데모 스크린샷에서 <code class=\"language-text\">LinearSRGBColorSpace</code>(좌)와 <code class=\"language-text\">SRGBColorSpace</code>(우)를 확인해보세요.</p>\n<p><img src=\"https://i.imgur.com/KaE4tIQ.png\" alt=\"비선형 sRGB와 선형 sRGB 차이\"></p>\n<h3 id=\"postprocessing의-output-colorspace\" style=\"position:relative;\"><a href=\"#postprocessing%EC%9D%98-output-colorspace\" aria-label=\"postprocessing의 output colorspace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Postprocessing의 Output ColorSpace</h3>\n<p><a href=\"https://github.com/pmndrs/postprocessing?tab=readme-ov-file#output-color\">pmndrs/postprocessing</a>문서에서는 Output Color Space에 대해 언급하는데요</p>\n<blockquote>\n<p>새로운 애플리케이션은 색상 관리를 위한 선형 워크플로우를 따라야 하며, 포스트 프로세싱은 이를 자동으로 지원합니다. WebGLRenderer.canvasColorSpace를 SRGBColorSpace로 설정하기만 하면 포스트 프로세싱이 그에 따라 진행됩니다. 내장 패스는 화면에 렌더링할 때 자동으로 색상을 인코딩하고 내부 렌더링 작업은 항상 가장 적합한 색 공간에서 수행됩니다.</p>\n</blockquote>\n<p>이 때 <strong>linear workflow</strong>는<br>\n(1) 텍스쳐 등의 색상을 sRGB로 input -> (2) 선형(Linear) 공간에서 색상 연산 -> (3) 계산 결과는 sRGB로 다시 output</p>\n<p>이러한 과정인데, postprocessing이 알아서 해줄거니까 <code class=\"language-text\">WebGLRenderer</code>설정을 <code class=\"language-text\">outputColorSpace = SRGBColorSpace</code>로 유지하기만 하면 된다고 하네요</p>\n<p>그러면 앞에서 살펴본 Discussion에서 \"이거 하세요\"했던 <strong><code class=\"language-text\">linear</code> prop은 빼는게</strong> 좋긴 하겠네요?? 얘는 outputColorSpace를 <code class=\"language-text\">LinearSRGBColorSpace</code>로 바꿔버립니다.<br>\n어차피 <strong>사실적인 색감을 위해서는 outputColorSpace가 <code class=\"language-text\">SRGBColorSpace</code>임이 필수</strong>긴해요. 이것을 포기할 순 없습니다</p>\n<h2 id=\"tone-mapping---톤-매핑\" style=\"position:relative;\"><a href=\"#tone-mapping---%ED%86%A4-%EB%A7%A4%ED%95%91\" aria-label=\"tone mapping   톤 매핑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tone Mapping - 톤 매핑</h2>\n<p>그 밑에 아주아주아주 중요한 절인 <a href=\"https://github.com/pmndrs/postprocessing?tab=readme-ov-file#tone-mapping\">Tone Mapping</a>을 읽어봅시다<br>\n여기에서는 <strong>Postprocessing과 ToneMapping을 같이 쓸 때 주의할 점</strong>에 대해 이야기합니다<br>\n그 전에 <strong>ToneMapping</strong>이 뭔지 잠깐 보고 지나가면</p>\n<blockquote>\n<p>ToneMapping은 HDR(High Dynamic Range)출력 색상을 LDR(Low Dynamic Range)출력 색상으로 변환하는 프로세스입니다.</p>\n</blockquote>\n<p>이 때 <strong>Dynamic Range</strong>는 <strong>색상을 표현하는 숫자의 범위</strong>를 뜻합니다<br>\n예를 들어, LDR은 0~1의 범위에서 색상을 표현(ex. 0은 검은색, 1은 흰색)하는 반면, HDR은 음수 또는 1 초과의 범위에서 색상을 표현할 수 있습니다.</p>\n<p><img src=\"https://i.imgur.com/nfPzwLy.png\" alt=\"HDR LDR 예시\"></p>\n<p>이를테면 위 그림처럼, HDR의 넓은 범위에서는 검은색과 회색 사이의 명암 차이를 세세하게 구분할 수 있지만<br>\nLDR의 좁은 범위에서는 검은색과 회색 사이를 뭉뚱그려 표현하게 됩니다<br>\nHDR -> LDR 변환 프로세스는 마치 색상을 <a href=\"https://ko.wikipedia.org/wiki/%EC%96%91%EC%9E%90%ED%99%94_(%EC%A0%95%EB%B3%B4_%EC%9D%B4%EB%A1%A0)\">양자화(Quantization)</a>하는 과정이네요.</p>\n<p><img src=\"https://i.imgur.com/xj7g7RZ.png\" alt=\"압축프레스\"></p>\n<p>다시, Postprocessing에서 이 ToneMapping을 사용할 때 주의할점은<br>\n<strong>렌더러의 톤 매핑은 끄고 포스트프로세싱 효과 체인의 마지막에 톤매핑 효과를(Pass로서) 집어넣는다!!</strong> 입니다<br>\n여기에는 두 가지 이유가 있는데</p>\n<ul>\n<li>ToneMapping은 HDR -> LDR 양자화라고 했는데, 이를 <strong>렌더러설정에 넣으면 이미 Postprocessing이 적용되기도 전에 LDR로</strong> 눌려버립니다.\n<ul>\n<li>0 ~ 100 사이에서 연산한 색상의 디테일/퀄리티와 0 ~ 1 사이에서 연산하는 디테일/퀄리티는 안봐도 뻔하네요(0 ~ 100이라는 수치는 비유를 위해 과장했습니다)</li>\n</ul>\n</li>\n<li>렌더러의 <strong><em>clear color</em>에는 쉐이더가 포함되지 않으므로 ToneMapping이 적용되지 않습니다.</strong> 이는 곧 배경과 오브젝트 사이에 색감 불일치 문제를 야기합니다.\n<ul>\n<li><em>clear color</em> 란 렌더러가 매 프레임마다 장면을 지워내는 색상을 의미합니다.</li>\n<li>\"렌더러의 <em>clear</em> 과정은 쉐이더를 거치지 않는다\" 라고 하면 더 이해가 편하겠네요</li>\n<li>ToneMapping은 사실 쉐이더의 일종으로, \"<em>Fragment Shader 단계에서 픽셀마다 수행되는 수학적 함수</em>\" 이기 때문입니다.</li>\n<li>Postprocessing은 전체 입력 이미지에 적용되므로 톤 매핑도 전체 이미지에 균일하게 적용됩니다.</li>\n</ul>\n</li>\n</ul>\n<p>이러니 포스트프로세싱을 사용한다면 렌더러의 톤 매핑은 끄고, 효과 체인의 마지막에 <code class=\"language-text\">ShaderPass</code>로 톤 매핑을 추가합니다.<br>\nr3f에서는 <code class=\"language-text\">&lt;ToneMappingEffect></code>로 <del>딸깍</del> 간편하게 추가할 수 있습니다.</p>\n<p><strong>주의: r3f의 <code class=\"language-text\">&lt;Canvas></code>는 <a href=\"https://r3f.docs.pmnd.rs/api/canvas#defaults\">toneMapping 기본값이 <code class=\"language-text\">ACESFilmicToneMapping</code></a></strong> 으로, 기본적으로 렌더러에 톤 매핑이 추가되어있는 셈입니다<br>\n본인이 톤 매핑을 안쓸거라면 <code class=\"language-text\">NoToneMapping</code>을 명시하고, 톤 매핑을 쓸거라면 <code class=\"language-text\">&lt;EffectComposer></code> 내부 마지막에 <code class=\"language-text\">&lt;ToneMappingEffect /></code>를 넣어줍시다.</p>\n<h1 id=\"해결\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0\" aria-label=\"해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결</h1>\n<p>이제 요구사항의 종류별로 어떻게 설정하면 좋을지 정리해봅시다.</p>\n<h2 id=\"1-react-three-fiber-r3f-쓴다면\" style=\"position:relative;\"><a href=\"#1-react-three-fiber-r3f-%EC%93%B4%EB%8B%A4%EB%A9%B4\" aria-label=\"1 react three fiber r3f 쓴다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. React Three Fiber (r3f) 쓴다면..</h2>\n<h3 id=\"1-1-tonemapping-안-쓸거라면\" style=\"position:relative;\"><a href=\"#1-1-tonemapping-%EC%95%88-%EC%93%B8%EA%B1%B0%EB%9D%BC%EB%A9%B4\" aria-label=\"1 1 tonemapping 안 쓸거라면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-(1). ToneMapping 안 쓸거라면..</h3>\n<p>r3f고 ToneMapping 안 쓸거면 단순히 Canvas의 <code class=\"language-text\">gl</code> prop으로 다음과 같이 <strong>렌더러의 <code class=\"language-text\">toneMapping</code>을 꺼줍시다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Canvas</span></span>\n  <span class=\"token attr-name\">gl</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    toneMapping<span class=\"token operator\">:</span> <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>NoToneMapping\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Canvas</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위에서 살펴봤듯이 r3f Canvas의 <code class=\"language-text\">gl</code> prop 기본 설정은 <code class=\"language-text\">toneMapping: THREE.ACESFilmicToneMapping</code>이라 꼭 <code class=\"language-text\">NoToneMapping</code>으로 바꿔줍시다.<br>\n이렇게만 하시면 되니 이제 <code class=\"language-text\">&lt;EffectComposer></code>에 원하는 포스트프로세싱 효과를 넣어줍시다.</p>\n<h3 id=\"1-2-tonemapping-쓸거라면\" style=\"position:relative;\"><a href=\"#1-2-tonemapping-%EC%93%B8%EA%B1%B0%EB%9D%BC%EB%A9%B4\" aria-label=\"1 2 tonemapping 쓸거라면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-(2). ToneMapping 쓸거라면..</h3>\n<p>근데 ToneMapping을 쓰고 싶다면</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Canvas</span></span>\n  <span class=\"token attr-name\">gl</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    toneMapping<span class=\"token operator\">:</span> <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>NoToneMapping\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  ...\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EffectComposer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>effectOn <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">/* 원하는 다른 후처리 Effect*/</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ToneMapping</span></span> <span class=\"token attr-name\">mode</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>ToneMappingMode<span class=\"token punctuation\">.</span><span class=\"token constant\">ACES_FILMIC</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">EffectComposer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Canvas</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>(1)렌더러에는 톤매핑을 끄고 (2)<code class=\"language-text\">&lt;EffectComposer></code>는 항시 켜되, (3)<code class=\"language-text\">&lt;ToneMapping></code>을 마지막에 넣고, 원하는 후처리 효과만 조건부로 토글</strong>해주는게 좋겠네요.</p>\n<h2 id=\"2-단순-threejs만-쓰고-있다면\" style=\"position:relative;\"><a href=\"#2-%EB%8B%A8%EC%88%9C-threejs%EB%A7%8C-%EC%93%B0%EA%B3%A0-%EC%9E%88%EB%8B%A4%EB%A9%B4\" aria-label=\"2 단순 threejs만 쓰고 있다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 단순 Three.js만 쓰고 있다면..</h2>\n<p>이 경우 <code class=\"language-text\">postprocessing</code> 패키지 없어도 three 패키지의 <code class=\"language-text\">examples/jsm</code>에서 가져다 쓰는 것만으로 해결해볼 수 있습니다.</p>\n<p>이 때 기억하고 가야 할 점은</p>\n<ul>\n<li><strong>포스트프로세싱이 끝나고 색상을 선형 -> 비선형 감마보정</strong>하는 것은 <code class=\"language-text\">postprocessing</code> 라이브러리에서 해주던 일입니다. 이거 안 쓰면 우리가 직접 해줘야 합니다</li>\n<li><strong>ToneMapping은 Shader의 일종</strong>이라고 했습니다.</li>\n</ul>\n<h3 id=\"2-1-tonemapping-안-쓸거라면\" style=\"position:relative;\"><a href=\"#2-1-tonemapping-%EC%95%88-%EC%93%B8%EA%B1%B0%EB%9D%BC%EB%A9%B4\" aria-label=\"2 1 tonemapping 안 쓸거라면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-(1). ToneMapping 안 쓸거라면..</h3>\n<p>이러면 단순히 <strong>감마보정</strong>만 신경써주는 것만으로 전후 색상을 일치시킬 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GammaCorrectionShader <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/shaders/GammaCorrectionShader.js\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> shaderPass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ShaderPass</span><span class=\"token punctuation\">(</span>GammaCorrectionShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncomposer<span class=\"token punctuation\">.</span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span>shaderPass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://i.imgur.com/h1OiY1z.png\" alt=\"Three.js postprocessing on/off - NoToneMapping\"></p>\n<p>전체 코드가 필요하시면 <a href=\"https://codesandbox.io/p/devbox/cool-chaum-5flsps\">Codesandbox</a>에서 확인해보세요</p>\n<h3 id=\"2-2-tonemapping-쓸거라면-\" style=\"position:relative;\"><a href=\"#2-2-tonemapping-%EC%93%B8%EA%B1%B0%EB%9D%BC%EB%A9%B4-\" aria-label=\"2 2 tonemapping 쓸거라면  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-(2). ToneMapping 쓸거라면 ..</h3>\n<p>이 경우 <strong>ShaderPass를 톤매핑 한 번, 감마보정 한 번</strong> 총 두 번을 써야합니다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> EffectComposer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/postprocessing/EffectComposer.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RenderPass <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/postprocessing/RenderPass.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> OutlinePass <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/postprocessing/OutlinePass.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ShaderPass <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/postprocessing/ShaderPass.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GammaCorrectionShader <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/shaders/GammaCorrectionShader.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ACESFilmicToneMappingShader <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/shaders/ACESFilmicToneMappingShader\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">antialias</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 👉 ToneMapping 켜고 시작</span>\nrenderer<span class=\"token punctuation\">.</span>toneMapping <span class=\"token operator\">=</span> <span class=\"token constant\">THREE</span><span class=\"token punctuation\">.</span>ACESFilmicToneMapping<span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// 👉 Shader Pass로 톤매핑쉐이더 추가</span>\ncomposer<span class=\"token punctuation\">.</span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ShaderPass</span><span class=\"token punctuation\">(</span>ACESFilmicToneMappingShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 👉 마지막에 색상 공간을 sRGB로 변환해주는 Pass</span>\ncomposer<span class=\"token punctuation\">.</span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ShaderPass</span><span class=\"token punctuation\">(</span>GammaCorrectionShader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"https://i.imgur.com/FjCksz4.png\" alt=\"Three.js postprocessing on/off - ToneMapping\"></p>\n<p>이렇게 <strong>(1)렌더러에 원하는 ToneMapping을 켜고 시작한 다음 (2)포스트프로세싱을 사용하게 되면 효과 체인 마지막에 톤매핑 쉐이더를</strong> 넣어줍니다.<br>\n전체 코드를 봐야겠다면 <a href=\"https://codesandbox.io/p/devbox/recursing-dewdney-wt8wpy?embed=1&#x26;file=%2Fmain.js\">Codesandbox</a>에서 확인해보세요.</p>\n<hr>\n<p><br>\n이렇게 해서, <strong>Three.js에서 Postprocessing을 적용하고나면 색감이 달라지는 문제</strong>를 알아보고<br>\nr3f인지 threejs 바닐라인지, ToneMapping을 쓸건지 아닌지, 등등 <strong>니즈에 따른 해결법</strong>을 알아봤습니다.</p>\n<p>또한 그 과정에서, <strong>왜 그런 문제가 생겼고 이렇게 해결되는지</strong>, 아래 내용을 통해 알아봤습니다</p>\n<ul>\n<li><strong>Postprocessing</strong>과 <strong>Effect Chain</strong>에 대해</li>\n<li><strong>Color Space</strong>에 대한 개념과 <strong>선형/비선형</strong> 워크플로우, 그리고 <strong>감마보정</strong> 등</li>\n<li><strong>ToneMapping</strong>이 무엇이며 <strong>Postprocessing과 함께 사용 시</strong> 무엇을 주의해야 하는지</li>\n</ul>\n<p>재밌는 내용이 많았네요</p>\n<p>아직도 약간.. 그럼 EffectComposer 켜고 톤매핑 끄고 어쩌구저쩌구 청기올려 백기내려 하면 어떻게되는지 헷갈리신다면<br>\n<a href=\"/postprocessing-demo\">데모</a>에서 컨트롤패널UI의 옵션을 끄고 켜고, 메쉬를 클릭해보고, 하면서 어떻게 되는지 실제로 확인해보세요.</p>\n<p><img src=\"https://i.imgur.com/TOGuakO.png\" alt=\"청기백기\"></p>\n<p>이만 마칩니다.</p>","frontmatter":{"title":"🌈 Postprocessing 적용 시 색감/톤이 바뀌는 사람 보시오(Three.js, R3F)","date":"August 31, 2025","description":"Postprocessing과 EffectChain, Color Space, Tone Mapping 대환장 콜라보","tag":["Three.js","react-three-fiber","React","Trouble Shooting"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9\">문제상황</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9B%90%EC%9D%B8%EC%9D%84-%EC%B0%BE%EC%95%84-%EB%8B%A4%EC%9D%B4%EB%B8%8C\">원인을 찾아 다이브</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%8F%AC%EC%8A%A4%ED%8A%B8%ED%94%84%EB%A1%9C%EC%84%B8%EC%8B%B1%EA%B3%BC-%ED%9A%A8%EA%B3%BC-%EC%B2%B4%EC%9D%B8-postprocessing--effect-chain\">포스트프로세싱과 효과 체인 (Postprocessing &#x26; Effect Chain)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%83%89%EA%B3%B5%EA%B0%84%EA%B3%BC-%EA%B0%90%EB%A7%88%EB%B3%B4%EC%A0%95-colorspace--gamma-correction\">색공간과 감마보정 (ColorSpace &#x26; Gamma Correction)</a></p>\n<ul>\n<li><a href=\"#postprocessing%EC%9D%98-output-colorspace\">Postprocessing의 Output ColorSpace</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#tone-mapping---%ED%86%A4-%EB%A7%A4%ED%95%91\">Tone Mapping - 톤 매핑</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%95%B4%EA%B2%B0\">해결</a></p>\n<ul>\n<li>\n<p><a href=\"#1-react-three-fiber-r3f-%EC%93%B4%EB%8B%A4%EB%A9%B4\">1. React Three Fiber (r3f) 쓴다면..</a></p>\n<ul>\n<li><a href=\"#1-1-tonemapping-%EC%95%88-%EC%93%B8%EA%B1%B0%EB%9D%BC%EB%A9%B4\">1-(1). ToneMapping 안 쓸거라면..</a></li>\n<li><a href=\"#1-2-tonemapping-%EC%93%B8%EA%B1%B0%EB%9D%BC%EB%A9%B4\">1-(2). ToneMapping 쓸거라면..</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%EB%8B%A8%EC%88%9C-threejs%EB%A7%8C-%EC%93%B0%EA%B3%A0-%EC%9E%88%EB%8B%A4%EB%A9%B4\">2. 단순 Three.js만 쓰고 있다면..</a></p>\n<ul>\n<li><a href=\"#2-1-tonemapping-%EC%95%88-%EC%93%B8%EA%B1%B0%EB%9D%BC%EB%A9%B4\">2-(1). ToneMapping 안 쓸거라면..</a></li>\n<li><a href=\"#2-2-tonemapping-%EC%93%B8%EA%B1%B0%EB%9D%BC%EB%A9%B4-\">2-(2). ToneMapping 쓸거라면 ..</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/til/deploy-vite-project-using-github-pages/"},"frontmatter":{"title":"머쓱할 정도로 쉬운, Vite 프로젝트를 Github Page에 배포하는 방법. + Routing 버그 해결"}},"next":null},"pageContext":{"id":"6615b2aa-f547-581c-b867-9790f5cfb16e","previousPostId":"7609df7a-0cbc-58cb-b53b-cf8043e366a5","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}