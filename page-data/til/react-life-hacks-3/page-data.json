{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/til/react-life-hacks-3/","result":{"data":{"site":{"siteMetadata":{"title":"조성개발실록"}},"markdownRemark":{"id":"479330c5-f4fb-58ab-9c46-a87312afa02d","excerpt":"! 주의 : TIL 게시글입니다. 다듬지 않고 올리거나 기록을 통째로 복붙했을 수 있는 뒷고기 포스팅입니다. <form> form은 무엇입니까? 입력필드의 집합입니다\n우리는 여러 입력필드들로부터 데이터를 긁어와서, 검증하고, 제출하고 싶습니다 이 form…","html":"<blockquote>\n<p>! 주의 : TIL 게시글입니다. 다듬지 않고 올리거나 기록을 통째로 복붙했을 수 있는 뒷고기 포스팅입니다.</p>\n</blockquote>\n<h1 id=\"form\" style=\"position:relative;\"><a href=\"#form\" aria-label=\"form permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;form></h1>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/HTML/Element/form\">form</a>은 무엇입니까?<br>\n입력필드의 집합입니다\n우리는 여러 입력필드들로부터 데이터를 긁어와서, 검증하고, 제출하고 싶습니다</p>\n<p>이 form 내부에 존재하는 버튼들은 기본값으로 <code class=\"language-text\">type=\"submit\"</code>이 되어,<br>\n클릭 시 브라우저는 http요청을 생성하고 전송합니다.<br>\n대개 우리는 브라우저의 이 기본적인 양식 제출 방식이 아닌 직접 다루고 싶어하기에<br>\n버튼을 <code class=\"language-text\">type=\"button\"</code>으로 만들어 onClick으로 처리하거나,<br>\n<code class=\"language-text\">onSubmit</code> 핸들러에서 <code class=\"language-text\">event.preventDefault()</code>로 요청 전송을 방지합니다.</p>\n<h2 id=\"form-데이터-데루기\" style=\"position:relative;\"><a href=\"#form-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%8D%B0%EB%A3%A8%EA%B8%B0\" aria-label=\"form 데이터 데루기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>form 데이터 데루기</h2>\n<p>리액트에서 form 내의 input 요소들로부터 데이터를 얻어오는 법은 크게 세 가지가 있습니다 :</p>\n<h3 id=\"1-state\" style=\"position:relative;\"><a href=\"#1-state\" aria-label=\"1 state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. state</h3>\n<p><a href=\"https://sungpaks.github.io/til/react-life-hacks-1/#%EA%B0%92%EC%9D%84-%EC%86%8C%EC%A4%91%ED%9E%88-%EA%B0%96%EA%B3%A0-%EC%9E%88%EA%B8%B0\">이전에 양방향 바인딩과 ref를 이용한 입력값 관리에 대해 살짝 봤습니다</a>\n리액트에서는 input 요소의 값을 상태로 관리하여 언제든지 그 값에 접근할 수 있습니다.</p>\n<p>그런데 form 내의 입력란이 막.. 많아지면 이를 개별 state 객체로 관리하기 힘들어집니다<br>\n따라서 상태를 아예 객체 하나로 퉁치고, 아래처럼 상태값을 관리해볼 수 있습니다 :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleInputChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">identifier<span class=\"token punctuation\">,</span> e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setEnteredValues</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>identifier<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>객체의 <strong>키값으로 동적인 값</strong>을 주기 위해 <code class=\"language-text\">[identifier]</code>와 같이 대괄호로 동적인 값임을 명시했습니다.</p>\n<p>이제 <code class=\"language-text\">&lt;input value={enterdValues.email} onChange={(e)=>handleInputChange('email', e)}></code>와 같이 써주면 편하겠네요</p>\n<h3 id=\"2-ref\" style=\"position:relative;\"><a href=\"#2-ref\" aria-label=\"2 ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. ref</h3>\n<p>참조를 이용해볼 수도 있습니다. 코드 자체는 이게 더 간단할 수 있습니다\n<code class=\"language-text\">useRef()</code>로 참조를 생성하고, <code class=\"language-text\">&lt;input ref={ref}></code>와 같이 등록하면,<br>\n제출 시점에 <code class=\"language-text\">ref.current.value</code>로 값에 접근할 수 있습니다.</p>\n<p>그런데 제출 후 값을 초기화하고 싶으면<br>\n<code class=\"language-text\">ref.current.value = ''</code>와 같은 행동을 할 수 있지만<br>\n약간.. 리액트 패러다임에 맞지 않는다고 전에 살펴봤었습니다</p>\n<h3 id=\"formdata로-form-제출-제어하기\" style=\"position:relative;\"><a href=\"#formdata%EB%A1%9C-form-%EC%A0%9C%EC%B6%9C-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0\" aria-label=\"formdata로 form 제출 제어하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FormData로 &#x3C;form> 제출 제어하기</h3>\n<p>또 한가지, 브라우저 내장 기능인 FormData를 사용해볼 수 있습니다.<br>\nonSubmit에서 받아온 event객체를 <code class=\"language-text\">new FormData(event.target)</code>과 같이 써서 FormData객체를 생성할 수 있습니다.</p>\n<p>이 때, FormData 객체를 생성하려면, 각 html input요소에 <code class=\"language-text\">name</code> attribute를 설정해줘야 합니다.<br>\n<code class=\"language-text\">&lt;input name=\"email\"></code>처럼요<br>\n<code class=\"language-text\">&lt;select>, &lt;textfield></code>같은 다른 필드도 예외없이 전부요</p>\n<p>이제 이 <code class=\"language-text\">name</code> attribute에 썼던 이름을 이용하여 값을 가져올 수 있습니다.<br>\n<code class=\"language-text\">.get('email')</code>같은 메서드로 개별 값을 가져올 수도 있고,<br>\n<code class=\"language-text\">Object.fromEntries(formData.entries())</code>와 같이<br>\nObject 전역객체의 정적메서드를 사용하여 한 번에 객체로 변환할 수 있습니다.</p>\n<p>주의할 점은, 이 때 체크박스 하위 값들은 이 엔트리에 모두 포함되지 않는데<br>\n<code class=\"language-text\">type=\"checkbox\", name=\"acquisition\"</code>같은 동일한 이름의 하위 옵션들이라서<br>\n<code class=\"language-text\">formData.getAll('acquisition')</code>과 같이 사용해줘야 체크된 값들을 모두 가져옵니다.</p>\n<p>이 경우 값 리셋도 쉬운데,<br>\n<code class=\"language-text\">&lt;Form></code> 내에서 <code class=\"language-text\">type=\"reset\"</code>인 버튼을 두면 이걸 클릭하여 초기화되게 할 수도 있고<br>\nonSubmit 이벤트 객체에서 <code class=\"language-text\">event.target.reset()</code> 메서드를 제공하므로 프로그래밍적인 방법으로도 가능합니다.</p>\n<h2 id=\"form-데이터-검증하기\" style=\"position:relative;\"><a href=\"#form-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0\" aria-label=\"form 데이터 검증하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>form 데이터 검증하기</h2>\n<p>html 요소들에 <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation#using_built-in_form_validation\">빌트인 attribute를 사용</a>하여 어느정도의 입력을 제어하고 검증할 수 있습니다.<br>\n그 외에도,</p>\n<h3 id=\"1-매-입력stroke마다-검증하고-경고를-날릴까요\" style=\"position:relative;\"><a href=\"#1-%EB%A7%A4-%EC%9E%85%EB%A0%A5stroke%EB%A7%88%EB%8B%A4-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B3%A0-%EA%B2%BD%EA%B3%A0%EB%A5%BC-%EB%82%A0%EB%A6%B4%EA%B9%8C%EC%9A%94\" aria-label=\"1 매 입력stroke마다 검증하고 경고를 날릴까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 매 입력(stroke)마다 검증하고 경고를 날릴까요?</h3>\n<p>이 경우는 필연적으로 state로 입력값을 제어하는 경우여야 합니다.<br>\n그래야 매 stroke마다 확인하고, UI를 업데이트하겠죠?</p>\n<p>근데 너무 이른 판단일 수 있어요 아무래도..<br>\n사용자는 아직 입력 중인데, 제대로 입력하라고 호들갑을 떨어버리면 불쾌할 수 있습니다.<br>\n\"유저는 왕이다\"</p>\n<h3 id=\"2-포커스-해제-시\" style=\"position:relative;\"><a href=\"#2-%ED%8F%AC%EC%BB%A4%EC%8A%A4-%ED%95%B4%EC%A0%9C-%EC%8B%9C\" aria-label=\"2 포커스 해제 시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 포커스 해제 시</h3>\n<p><code class=\"language-text\">onBlur</code> 이벤트 리스너를 등록하여, 입력 요소에 포커스가 해제되면 값을 검증할 수 있습니다.<br>\n그럼 유효한 값이 아닌 상태로 포커스를 떠나는 경우를 경고할 수 있습니다.<br>\n아까보단 좀 낫네요</p>\n<p>근데 그럼 다시 타이핑하러 돌아와도, 경고가 남아있을 수 있겠죠?<br>\n이를 위해 첫 번째 방법과 결합하여 다시 타이핑을 재개하면 경고를 제거하게 하거나,<br>\n<code class=\"language-text\">onFocus</code> 이벤트를 등록하여 포커스 시 경고를 제거해볼 수 있겠습니다.</p>\n<h3 id=\"3-form-제출-시-검사하기\" style=\"position:relative;\"><a href=\"#3-form-%EC%A0%9C%EC%B6%9C-%EC%8B%9C-%EA%B2%80%EC%82%AC%ED%95%98%EA%B8%B0\" aria-label=\"3 form 제출 시 검사하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Form 제출 시 검사하기</h3>\n<p>모든 입력이 끝나고 제출된 후에야 값을 검사합니다.<br>\nref나 FormData로 구현하면 아마 보통 이래야 하겠죠?</p>\n<p>이 경우 사용자는 충분히 유효한 값을 입력할 기회를 갖지만,<br>\n다 제출하고 나서야 피드백을 받으니 좀 늦은 감이 있을 수도 있습니다.</p>\n<p>그럼 어떤 방법을 사용하죠? 하면 국룰처럼 외치는 \"취향차이\"가 정답입니다</p>\n<h1 id=\"지연로딩\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9\" aria-label=\"지연로딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지연로딩</h1>\n<p><a href=\"https://wikidocs.net/197644\">지연로딩</a>은 코드(컴포넌트들)를 무조건 한 번에 다 로딩하는 것이 아닌,<br>\n페이지를 로드 시 필요한 컴포넌트들만 로드하게 합니다.</p>\n<p>예를 들어, 코드에서 import로 가져오는 구문을 수정해볼 수 있는데<br>\n<code class=\"language-text\">const BlogPage = lazy(() => import('./pages/Blog'));</code>와 같이 컴포넌트를 지연로딩해볼 수 있습니다.<br>\n참고로 <code class=\"language-text\">lazy()</code>함수는 리액트에서 제공하는 유틸함수입니다</p>\n<p>앗, 그럼 아직 안 가져왔을 때를 위해 또한 리액트가 제공하는 <code class=\"language-text\">&lt;Suspense></code>블록을 사용할 수 있는데</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>기다리는동안보여줄컴포넌트<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BlogPage</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이렇게 Suspense로 감싸서 효과를 낼 수 있습니다.</p>\n<h1 id=\"합성-컴포넌트-만들기-components-composition\" style=\"position:relative;\"><a href=\"#%ED%95%A9%EC%84%B1-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-components-composition\" aria-label=\"합성 컴포넌트 만들기 components composition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>합성 컴포넌트 만들기 (Components Composition)</h1>\n<p><strong>합성 컴포넌트</strong>는 스스로 독립적으로는 동작하지 못하되, 함께 있어야 비로소 동작할 수 있는 컴포넌트 조합을 만드는 일종의 리액트 패턴입니다.<br>\n비슷한 예로, html 요소 중 <code class=\"language-text\">&lt;option></code>과 <code class=\"language-text\">&lt;select></code>가 그러한 관계죠</p>\n<p>예를 들어, 아코디언(하나를 탭하면 디테일을 열고, 그럼 다른 애들은 닫혀 있는) 컴포넌트를 만들고 싶으면</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Accordion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">,</span> className <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">item</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 써볼까요?<br>\n근데 확장성이 좀 부족해보입니다. item이 저렇게 생겼을거라는 보장이 없어요.</p>\n<h2 id=\"children-props로-유연하게-하위-컴포넌트를-받게-하기\" style=\"position:relative;\"><a href=\"#children-props%EB%A1%9C-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B2%8C-%ED%95%98%EC%9C%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%B0%9B%EA%B2%8C-%ED%95%98%EA%B8%B0\" aria-label=\"children props로 유연하게 하위 컴포넌트를 받게 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">children</code> props로 유연하게 하위 컴포넌트를 받게 하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Accordion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> className <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 껍데기만 만들고, <code class=\"language-text\">children</code> props를 받아 합성 컴포넌트를 노려보는게 좋을 것 같습니다.</p>\n<p>이제 이 안에 들어갈 item인 AccordionItem을 만들어보면 좋을 것 같아요</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">AccordionItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> className<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 대충 item 컴포넌트를 만들어서,</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Accordion</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accordion<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccordionItem</span></span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"accordion-item\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1st<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    first item\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AccordionItem</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccordionItem</span></span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"accordion-item\"</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2nd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    second item\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AccordionItem</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Accordion</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이런 식으로 쓸 수 있겠습니다.</p>\n<h2 id=\"합성된컴포넌트의-묶음에-로직을-추가하기\" style=\"position:relative;\"><a href=\"#%ED%95%A9%EC%84%B1%EB%90%9C%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%AC%B6%EC%9D%8C%EC%97%90-%EB%A1%9C%EC%A7%81%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"합성된컴포넌트의 묶음에 로직을 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(합성된)컴포넌트의 묶음에 로직을 추가하기</h2>\n<p>이제 아코디언 아이템이 하나만 열리게 동작을 추가하고 싶어요<br>\n근데 : <code class=\"language-text\">&lt;Accordion></code>에서는 children과 직접적인 상호작용이 어렵습니다.<br>\n여기서는 단순히 children을 받아서 렌더링에 넘기기만 할 뿐이라서요</p>\n<p>대신 Context로 상태를 전달하면 좋을 것 같습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> AccordionContext <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useAccordionContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>AccordionContext<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">//Context.Provider의 범위 내에 해당하지 않을 수 있음</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> ctx\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Accordion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children<span class=\"token punctuation\">,</span> className <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>openItemId<span class=\"token punctuation\">,</span> setOpenItemId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">toggleItem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setOpenItemId</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevId</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>prevId <span class=\"token operator\">===</span> id <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> contextValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    openItemId<span class=\"token punctuation\">,</span>\n    toggleItem<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccordionContext.Provider</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>contextValue<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>className<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">AccordionContext.Provider</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 Wrapper 컴포넌트인 <code class=\"language-text\">&lt;Accordion></code>에서 상태값을 컨텍스트로써 제공하게 합니다.<br>\n그럼 하위 컴포넌트들은 어디서든 그 값이 필요하면 컨텍스트 값을 가져다 쓸 수 있습니다.<br>\n그리고 <code class=\"language-text\">useAccordionContext()</code> 커스텀 훅을 추가하여<br>\n아예 <code class=\"language-text\">useContext</code>를 더욱 캡슐화?해버렸습니다<br>\n근데 이 때, 이 훅을 사용한 곳이 적절한 <code class=\"language-text\">Provider</code>의 하위에 있지 않은 경우를 예외처리해줘야겠죠?</p>\n<p>이제 <code class=\"language-text\">&lt;AccordionItem></code>에서는 <code class=\"language-text\">const { openItemId, toggleItem } = useAccordionContext();</code> 이렇게 하면 정보를 얻어올 수 있습니다.</p>\n<h2 id=\"합성-컴포넌트를-그룹화하기\" style=\"position:relative;\"><a href=\"#%ED%95%A9%EC%84%B1-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EA%B7%B8%EB%A3%B9%ED%99%94%ED%95%98%EA%B8%B0\" aria-label=\"합성 컴포넌트를 그룹화하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>합성 컴포넌트를 그룹화하기</h2>\n<p>근데 처음에, 합성 컴포넌트의 하위 컴포넌트는 응당 <em>스스로는 독립적인 컴포넌트로서 사용되지 못하는 컴포넌트</em>라고 했습니다.<br>\n근데 지금은 모르는 누군가 와서 <code class=\"language-text\">&lt;AccordionItem></code>을 import하고 개별적으로 사용해버리면<br>\n그 목적을 달성하지 못합니다.<br>\n또한 <code class=\"language-text\">&lt;Accordion></code>밑에는 <code class=\"language-text\">&lt;AccordionItem></code>이 그룹으로 사용되어야 한다는 필연성을 저밖에 알지 못하죠,</p>\n<p>이제 <code class=\"language-text\">&lt;AccordionItem></code>이 무조건 <code class=\"language-text\">&lt;Accordion></code>의 하위가 되게 그룹화하는 방법이 있는데<br>\nAccordionItem 컴포넌트를 export하지 않고, Accordion 컴포넌트의 구현부에 위치하게 합니다.<br>\n그런 다음, 단순히<br>\n<code class=\"language-text\">Accordion.Item = AccordionItem</code> 이렇게 프로퍼티로 등록해버립니다!!</p>\n<p>그럼 사용할 때는, AccordionItem을 import할 필요도 없이,<br>\n<code class=\"language-text\">&lt;Accordion.Item></code>으로 서브 컴포넌트를 갖다쓸 수 있습니다.<br>\n마치 <code class=\"language-text\">&lt;Context.Provider></code>처럼요<br>\n이렇게 하면 더 명시적으로 <em>메인과 서브 컴포넌트</em>를 합섭 컴포넌트로서 그룹화해버릴 수 있습니다.</p>","frontmatter":{"title":"96년차 개발자도 모르는 리액트 잡기술 (3)","date":"September 21, 2024","description":"죽지도 않고 돌아온 시리즈","tag":["TIL","React"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#form\">&#x3C;form></a></p>\n<ul>\n<li>\n<p><a href=\"#form-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%8D%B0%EB%A3%A8%EA%B8%B0\">form 데이터 데루기</a></p>\n<ul>\n<li><a href=\"#1-state\">1. state</a></li>\n<li><a href=\"#2-ref\">2. ref</a></li>\n<li><a href=\"#formdata%EB%A1%9C-form-%EC%A0%9C%EC%B6%9C-%EC%A0%9C%EC%96%B4%ED%95%98%EA%B8%B0\">FormData로 &#x3C;form> 제출 제어하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#form-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0\">form 데이터 검증하기</a></p>\n<ul>\n<li><a href=\"#1-%EB%A7%A4-%EC%9E%85%EB%A0%A5stroke%EB%A7%88%EB%8B%A4-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B3%A0-%EA%B2%BD%EA%B3%A0%EB%A5%BC-%EB%82%A0%EB%A6%B4%EA%B9%8C%EC%9A%94\">1. 매 입력(stroke)마다 검증하고 경고를 날릴까요?</a></li>\n<li><a href=\"#2-%ED%8F%AC%EC%BB%A4%EC%8A%A4-%ED%95%B4%EC%A0%9C-%EC%8B%9C\">2. 포커스 해제 시</a></li>\n<li><a href=\"#3-form-%EC%A0%9C%EC%B6%9C-%EC%8B%9C-%EA%B2%80%EC%82%AC%ED%95%98%EA%B8%B0\">3. Form 제출 시 검사하기</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9\">지연로딩</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%A9%EC%84%B1-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-components-composition\">합성 컴포넌트 만들기 (Components Composition)</a></p>\n<ul>\n<li><a href=\"#children-props%EB%A1%9C-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B2%8C-%ED%95%98%EC%9C%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EB%B0%9B%EA%B2%8C-%ED%95%98%EA%B8%B0\"><code class=\"language-text\">children</code> props로 유연하게 하위 컴포넌트를 받게 하기</a></li>\n<li><a href=\"#%ED%95%A9%EC%84%B1%EB%90%9C%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%AC%B6%EC%9D%8C%EC%97%90-%EB%A1%9C%EC%A7%81%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">(합성된)컴포넌트의 묶음에 로직을 추가하기</a></li>\n<li><a href=\"#%ED%95%A9%EC%84%B1-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EA%B7%B8%EB%A3%B9%ED%99%94%ED%95%98%EA%B8%B0\">합성 컴포넌트를 그룹화하기</a></li>\n</ul>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/til/react-life-hacks-2/"},"frontmatter":{"title":"96년차 개발자도 몰랐던 리액트 잡기술 (2)"}},"next":{"fields":{"slug":"/til/throw-on-hydration-mismatch-error-and-validate-dom-nesting-error/"},"frontmatter":{"title":"onThrowHydrationMismatch 에러.. 근데 이제 validateDOMNesting 경고를 곁들인. (Gatsby.js)"}}},"pageContext":{"id":"479330c5-f4fb-58ab-9c46-a87312afa02d","previousPostId":"f39c37a6-8402-594f-ba50-594edd716f6c","nextPostId":"86e7e062-cc00-54d4-889d-e4b3bd899a0e"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}