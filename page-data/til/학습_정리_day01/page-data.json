{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/til/학습_정리_day01/","result":{"data":{"site":{"siteMetadata":{"title":"조성개발실록"}},"markdownRemark":{"id":"055c8d8c-f1b8-5d9b-92f8-a4ad86557b6a","excerpt":"Day_01 기록.. Node.js…","html":"<p>Day_01 기록..</p>\n<h2 id=\"nodejs로-표준-입력-받고싶어요\" style=\"position:relative;\"><a href=\"#nodejs%EB%A1%9C-%ED%91%9C%EC%A4%80-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B3%A0%EC%8B%B6%EC%96%B4%EC%9A%94\" aria-label=\"nodejs로 표준 입력 받고싶어요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js로 표준 입력 받고싶어요</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node:readline\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">stdin</span><span class=\"token operator\">:</span> input<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">stdout</span><span class=\"token operator\">:</span> output <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node:process\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> input<span class=\"token punctuation\">,</span> output <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n  rl<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이건 딱 한 줄 입력 받는 예제인데<br>\n이걸 마개조해서<br>\n원할 때마다 입력스트림을 시작하는 함수를 따로 만들어버리고 싶었는데<br>\n이게 이벤트 리스너를 기반으로 하는거라 좀 쉽지 않았다<br>\n<code class=\"language-text\">rl.prompt()</code>같은 것도 발견하긴 했는데<br>\n결국에는 아래와 같이 했다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node:readline\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">stdin</span><span class=\"token operator\">:</span> input<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">stdout</span><span class=\"token operator\">:</span> output <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node:process\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> fail <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node:assert\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> input<span class=\"token punctuation\">,</span> output <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AM</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"AM\"</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PM</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"PM\"</span>\n\n<span class=\"token comment\">//rl.prompt(); 굳이 없어도 되네</span>\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">line</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> rl<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://nodejs.org/api/readline.html\">node.js documentation</a>에서 여기서 쓰인 이벤트나 <code class=\"language-text\">rl</code> 이런거에 대한 정보를 알 수 있다<br>\n<code class=\"language-text\">rl.prompt()</code>로 입력 스트림을 재개하거나 어쩌구.. 할 수 있다는데<br>\n그냥 없이, <code class=\"language-text\">\"\"</code>(빈 문자열)이 입력될 때까지 계속 받게 했다. <code class=\"language-text\">close</code>하지 않고<br>\n이렇게 하면 일단은 조건부로 무한정 받을 수 있는거시다 입력을</p>\n<h2 id=\"javascript에서-클래스를-만들어요\" style=\"position:relative;\"><a href=\"#javascript%EC%97%90%EC%84%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%9A%94\" aria-label=\"javascript에서 클래스를 만들어요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript에서 클래스를 만들어요</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token comment\">//name이라는 멤버변수 미리 선언</span>\n  #password <span class=\"token comment\">//#으로 private 설정 가능</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_name<span class=\"token punctuation\">,</span> _role</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> _name <span class=\"token comment\">//미리 선언한 name에 값 할당</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> _role <span class=\"token comment\">//미리 선언 안 했어도 그냥 이렇게 하면 생김</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> _name\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">thisIsStaticFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JavaScript에서 class는 속성(property)의 집합인 셈인데..</p>\n<ul>\n<li><code class=\"language-text\">constructor</code>로 생성자를 명시할 수 있다</li>\n<li><code class=\"language-text\">static</code> 붙이면 정적으로 선언할 수 있다</li>\n<li>사실 함수도 JavaScript에서는 <a href=\"https://ko.wikipedia.org/wiki/%EC%9D%BC%EA%B8%89_%EA%B0%9D%EC%B2%B4\">일급객체</a>라서, 그냥 속성을 추가하듯이 작성하면 됨</li>\n<li>기본적으로 모든 속성(property)들은 public인데..\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes/Private_properties\">클래스 필드를 private으로</a>해버릴 수 있는 방법이 <strong>ES2019</strong>부터 추가되었다</li>\n<li><code class=\"language-text\">#</code>(해쉬 라고 읽으면 됨) prefix를 추가하여 <code class=\"language-text\">private</code>으로 선언할 수 있는 거시다</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"factory-method-pattern\" style=\"position:relative;\"><a href=\"#factory-method-pattern\" aria-label=\"factory method pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Factory Method Pattern?</h2>\n<p>그런데 하고 싶은 것이 있었는데<br>\n<a href=\"https://refactoring.guru/ko/design-patterns/factory-method\">팩토리 메서드 패턴</a>이다</p>\n<p>그러니까 이건..<br>\n(1) 먼저 생성자를 <code class=\"language-text\">private</code>으로 제한<br>\n(2) 생성자는 특별한 메서드 (ex: <code class=\"language-text\">getNewInstance()</code>)에서 호출<br>\n(3) 이 특별한 객체 생성 메서드에서는 조건에 따라 객체 생성을 결정 (ex: 이미 객체가 10개 생성되었으면 객체 생성 하지 않는다, 등..)<br>\n이런 식으로 해서 객체 생성을 한 층 더 캡슐화하고 제어하는 패턴이다</p>\n<p>사실 이름이 <strong>팩토리 메서드 패턴</strong>이 맞는지 모르겠는데,<br>\n전에 Java 수업 때 교수님께서 객체지향 패턴 중 하나로 알려주셨던 내용인데<br>\n이름이 기억이 안 나서 GPT에게 설명을 주고 이거 이름 뭐냐고 물어봤더니 저거라고 답했다..<br>\n근데 또 위 링크의 설명을 보면 살짝? 다른 것 같긴 하다</p>\n<p>아무튼, 구체적으로 하고싶었던 것은<br>\n입력된 값의 유효성 검사 ---> 유효한 값이면 객체 생성 / 아니면 예외처리<br>\n이 과정을 아예 class 내에서 캡슐화하여 <code class=\"language-text\">getNewInstance(input)</code> 이런걸 넣으면,<br>\n유효 값인 경우, 객체를 생성하여 리턴, 아니면 <code class=\"language-text\">null</code>이든 <code class=\"language-text\">false</code>든 예외 반환<br>\n이렇게 하고 싶었다<br>\n그런데 어라? JavaScript에서 생성자를 <code class=\"language-text\">private</code>으로 생성하는 방법은 없는 듯하다<br>\n(<code class=\"language-text\">#</code>도 안 되고, 다른 방법을 검색해봐도 안 나오는데.. 방법을 아신다면 알려주세요)<br>\n그래서 일단 생성자를 막지는 않고 그냥 원하는 대로 객체 생성 메서드를 따로 만들었을 뿐이었다</p>","frontmatter":{"title":"Node.js 표준 입력, JavaScript 클래스 용법 등 - Day01 학습정리","date":"July 15, 2024","description":"설명","tag":["TIL","JavaScript","Node.js"]},"tableOfContents":"<ul>\n<li><a href=\"#nodejs%EB%A1%9C-%ED%91%9C%EC%A4%80-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B3%A0%EC%8B%B6%EC%96%B4%EC%9A%94\">Node.js로 표준 입력 받고싶어요</a></li>\n<li><a href=\"#javascript%EC%97%90%EC%84%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%9A%94\">JavaScript에서 클래스를 만들어요</a></li>\n<li><a href=\"#factory-method-pattern\">Factory Method Pattern?</a></li>\n</ul>"},"previous":{"fields":{"slug":"/til/geolocation-based-running-tracker-prototype/"},"frontmatter":{"title":"위치 기반 러닝 트래커 프로토타입 개발해보기"}},"next":null},"pageContext":{"id":"055c8d8c-f1b8-5d9b-92f8-a4ad86557b6a","previousPostId":"a397784b-1eec-5bb1-8a08-4da4008bee4a","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}