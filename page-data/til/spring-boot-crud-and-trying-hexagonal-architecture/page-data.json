{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/til/spring-boot-crud-and-trying-hexagonal-architecture/","result":{"data":{"site":{"siteMetadata":{"title":"조성개발실록"}},"markdownRemark":{"id":"309045bc-9e1b-53b2-8c96-91320b6d5517","excerpt":"! 주의 : TIL…","html":"<blockquote>\n<p>! 주의 : TIL 게시글입니다. 다듬지 않고 올리거나 기록을 통째로 복붙했을 수 있는 뒷고기 포스팅입니다.</p>\n</blockquote>\n<p>새로운 사이드 프로젝트를 시작했어요<br>\n어렵고 오래 할 그런 건 아니고..<br>\n그냥 적당히 연습해볼 수 있는 정도의 주제를 골랐습니다</p>\n<p>저는 익숙하지 않은 백엔드 개발을 맡게 됐어요<br>\n새로운 도전을 하고싶어서 그랬습니다<br>\n전 항상 이것도 잘하고 저것도 잘하는 사람이 되고 싶어 하는데..<br>\n이도저도 아닌 인간이 되고 마는 것이 아닌지? 푸하하</p>\n<p>암튼.. 근데 제가 최근까지 바빴어서<br>\nboilerplate를 만들고 소셜로그인 구현같은 초기 세팅 부분들을<br>\n다른 백엔드 전문가인 지인이 좀 해줬습니다.<br>\n앞으로도 좀 리뷰어를 부탁했어요. PR올리면 코드리뷰를 받기로 했습니다<br>\n이제부터 제 백엔드 시니어인 것이애용<br>\n거인의 어깨에서 성장하려니까 두근거리는데요? ㅋㅅㅋ</p>\n<p>아무튼 이 말을 왜 하냐면<br>\n<strong>Hexagonal Architecture</strong>를 적용해놨다고,<br>\n설명을 좀 들어야 아마 이해가 갈 것이라고 해서<br>\n특강을 들었었습니다.<br>\n그 내용을 좀 정리한 기록으로 글을 시작하려고 합니다</p>\n<h1 id=\"헥사고날-아키텍처를-배웠어요\" style=\"position:relative;\"><a href=\"#%ED%97%A5%EC%82%AC%EA%B3%A0%EB%82%A0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EB%A5%BC-%EB%B0%B0%EC%9B%A0%EC%96%B4%EC%9A%94\" aria-label=\"헥사고날 아키텍처를 배웠어요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헥사고날 아키텍처를 배웠어요</h1>\n<p><a href=\"https://tech.osci.kr/hexagonal-architecture/\">헥사고날 아키텍처란?</a><br>\n또는 포트와 어댑터 아키텍처라고도 부른다고 하네요<br>\n이는 내부 비즈니스 로직을 외부와 단절시키고,<br>\n외부와 연결하는 포트/어댑터를 따로 두어 유연성을 높입니다.<br>\n또한 그 덕분에 테스트와 유지보수가 매우 용이하다고 하네요</p>\n<p>백문이불여일견이니 직접 봅시다.<br>\n백엔드 사수께서 짜주신 구조는 아래와 같습니다<br>\n혹여나 잘못된 부분이 있으면 제가 잘못 쓴거니까.. 칼같이 지적해주십시요</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">page/\n┠━ adapter/\n┃   ┠━ in/\n┃   ┃  ┠━ PageController (C)\n┃   ┃  ┗━ dto/\n┃   ┗━ out/\n┃      ┠━ PageCommandAdapter (C)\n┃      ┗━ PageQueryAdapter (C)\n┠━ application/\n┃   ┠━ port/\n┃   ┃  ┠━ in/\n┃   ┃  ┃  ┗━ GetPageUseCase (I)\n┃   ┃  ┗━ out/\n┃   ┃     ┠━ PageCommandPort (I)\n┃   ┃     ┗━ PageQueryPort (I)\n┃   ┃\n┃   ┗━ service/\n┃      ┗━ GetPageService (C)\n┠━ domain/\n┃   ┗━ entity/\n┃      ┗━ Page (C)\n┗━ infrastructure/\n     ┗━ repository/\n        ┗━ PageRepository (I)</code></pre></div>\n<p>Hexagonal Architecture를 적용한 Spring Boot 프로젝트 폴더구조.<br>\n서비스 내에서 <em>자신의 페이지를 생성,수정,삭제,조회</em> 하는 기능이 있는데<br>\n해당 기능인 <strong>Page</strong>의 하위 구조입니다.<br>\n<code class=\"language-text\">(I)</code>는 인터페이스, <code class=\"language-text\">(C)</code>는 클래스(구현체) 입니다.<br>\nUser, Auth, Page같은 feature? (단위를 이렇게 말해도 되는지 모르겠지만..) 별로 위와 같이 생긴 구조를 가집니다.</p>\n<ul>\n<li><code class=\"language-text\">adapter</code> : 외부와 연결되는 어댑터\n<ul>\n<li><code class=\"language-text\">in</code> : 외부(사용자)로부터 요청이 들어오는, 즉 Controller같은 것들</li>\n<li><code class=\"language-text\">out</code> : 외부(DB)로 요청이 나가는, 즉 DB로 가는 출구.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">application</code> : 애플리케이션 로직 구현부\n<ul>\n<li><code class=\"language-text\">port</code> : 여기에는 내부 로직인 <code class=\"language-text\">application</code>과 바깥 통로인 <code class=\"language-text\">adapter</code>를 연결하는 인터페이스가 자리합니다.\n<ul>\n<li><code class=\"language-text\">in</code> : 외부(사용자)에서 내부로 들어오는, UseCase같은 친구들입니다.</li>\n<li><code class=\"language-text\">out</code> : 내부에서 외부(DB)로 나가는, 쿼리를 포함할 친구들입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">service</code> : 여기에는 진짜 서비스 로직 구현체가 위치합니다. <code class=\"language-text\">~~UseCase</code>들의 구현체입니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">domain</code> : 서비스 로직에서 쓰게 되는 객체들\n<ul>\n<li><code class=\"language-text\">entity</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">infrastructure</code> : 객체를 DB에 Mapping하고 영속화하는 레이어? 라고 해야할까요..\n<ul>\n<li><code class=\"language-text\">repository</code>같은 애들이 들어갑니다. (<code class=\"language-text\">JpaRepository</code> 등.)</li>\n</ul>\n</li>\n</ul>\n<p>Query를 다시 한 번 Command와 Query로 나누었는데,<br>\nCRUD작업 중 R(READ)만이 Query, 나머지는 Command로 나눕니다.<br>\n이는 데이터베이스 관리를 Master-Slave로 사용하게 될 때를 대비하고자 하는 것이라고 해요.</p>\n<p><a href=\"https://multicoin.capital/ko/2021/07/30/scaling-reads-and-writes/\">웹서비스에서 데이터베이스 작업은 읽기와 쓰기의 비율이 최소 100:1에서 최대 10000:1</a>까지 간다고 합니다.<br>\n따라서 읽기 부하는 매우 자주 일어난다는 점인데<br>\n<a href=\"https://mariadb.com/ja/resources/blog/database-master-slave-replication-in-the-cloud/\">Master-Slave 복제</a>는 이러한 읽기 부하를 분산하기 위해 자주 사용됩니다<br>\n이는 곧, Write(Create, Update, Delete)만 수행하는 Master 데이터베이스를 따로 두고<br>\n이를 복제하여 Slave로 만들어 두고, Read작업은 이 Slave에서만 수행합니다.<br>\n이제 Master-Slave 간의 데이터는 일정 주기마다 동기화하면 되겠죠?<br>\nWrite작업의 반영이 진짜 즉 시 반 영 되어야 하는 (금융처럼) 특별한 서비스가 아니라면 꽤 유용할 것 같아요<br>\nSlave를 여럿 두면 비중이 높은 Read 부하를 분산시킬 수 있고,<br>\nSlave를 하나만 두더라도, 트랜잭션으로 인한 lock같은 경우에 read는 방해받지 않으니 병목도 줄어들 것 같습니다<br>\n또한 데이터를 복제해 두었으니, 문제가 생겨도 어느 정도는 안심이겠네요</p>\n<p>아 그리고, <code class=\"language-text\">Service</code>는 <code class=\"language-text\">UseCase</code> 구현체고, <code class=\"language-text\">QueryPort</code>/<code class=\"language-text\">CommandPort</code>는 <code class=\"language-text\">QueryAdapter</code>/<code class=\"language-text\">CommandAdapter</code>의 구현체인데<br>\n<code class=\"language-text\">Controller</code>나 <code class=\"language-text\">Service</code>같은 데서 이용할 때는 인터페이스인 <code class=\"language-text\">UseCase</code>, <code class=\"language-text\">Port</code>를 주입받게 해요. (빈으로 등록해뒀고, 인터페이스의 유일한 구현체가 <code class=\"language-text\">UseCase/Port</code>)<br>\n구현체가 아닌 추상계층에 의존하게 하여 결합도를 낮추는 셈</p>\n<h2 id=\"이외-신경-쓸-것들\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%99%B8-%EC%8B%A0%EA%B2%BD-%EC%93%B8-%EA%B2%83%EB%93%A4\" aria-label=\"이외 신경 쓸 것들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이외 신경 쓸 것들</h2>\n<p><code class=\"language-text\">Controller</code>만이 인터페이스 없이 바로 구현체인데,<br>\n<code class=\"language-text\">Controller</code>는 개발 중에 그 구조의 수정이 매우 빈번한 편이고, 주입받아 사용하는 곳도 없으니 굳이 추상화를 하지 않았다고 하네요<br>\n근데 예외로, Swagger 쓰려면 인터페이스를 만들어야 해요<br>\n그래서 그냥 Swagger Interface는 나중에 Controller 거진 다 만들고 지피티한테 작성해달라고 하고 있습니다 ㅋㅋ</p>\n<p>그리고 엔드포인트 작성 시 경로를 <code class=\"language-text\">/api/v1/</code> 꼭 이런 prefix를 붙이자고 했습니다<br>\n일단 <code class=\"language-text\">/api/</code>를 붙여야 함은, 배포 시 어떤 경로에 대한 요청이 백엔드로 가는 것인지, 프론트로 가는 것인지 알아야 하겠죠?<br>\n이는 <a href=\"https://sungpaks.github.io/deploy-your-project-with-vercel/\">Vercel 배포</a>할 때 매우 느꼈습니다\n그리고 나중에 가면 기존 기능을 더욱 디벨롭하고싶거나, 뭐 그런 충동이 들게 될 수 있는데<br>\n그렇다고 기존 기능을 바로 수정하거나 폐기해버리면 이전과 호환이 되지 않겠죠?<br>\n레거시 기능들은 그대로 <code class=\"language-text\">/v1/</code>으로 두고, <code class=\"language-text\">/v2/</code>처럼 새로운 버전으로 만들면 되는 일이라서, 저런 prefix가 붙게 되었습니다</p>\n<p>이외에도, <code class=\"language-text\">ResponseEntity&lt;?></code> 과 같이 응답용 Wrapper Class, <code class=\"language-text\">ApiResponse.ok()</code>와 같은 응답 상태 유틸, GlobalException 등을 구현해 놓았으니 적당히 이런걸 잘 사용하라는 전언이 있었습니다</p>\n<h1 id=\"이제-crud-만들어봐요\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%9C-crud-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B4%90%EC%9A%94\" aria-label=\"이제 crud 만들어봐요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이제 CRUD 만들어봐요</h1>\n<p>아키텍처는 알겠고, 이제 구현해봅시다.<br>\n<code class=\"language-text\">id, userId, title</code> 이러한 간단한 내용만을 갖는 <strong>페이지</strong>를<br>\n생성, 조회, 업데이트, 삭제, 모두 가능하게 CRUD를 구현하는 것이 목표입니다</p>\n<h2 id=\"controller\" style=\"position:relative;\"><a href=\"#controller\" aria-label=\"controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controller</h2>\n<p><code class=\"language-text\">@GetMapping(\"/{id}\"), @PostMapping(\"/create\")</code>와 같이 경로를 매핑하고, 메서드를 적절히 작성해줍니다<br>\n<code class=\"language-text\">/{id}</code>와 같은 경로 변수는 인자에서 <code class=\"language-text\">@PathVariable</code>로 받아올 수 있고,<br>\n인자에서 <code class=\"language-text\">@RequestBody</code>를 사용하여 Request Body의 JSON 데이터를 Java 객체에 매핑할 수 있습니다.<br>\n아래처럼요</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PutMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{id}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">updatePage</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">PageRequestDto</span> pageRequest<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/* TODO : 업데이트 로직을 추가 */</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApiResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>근데 받아올 DTO 객체가 필요해서, Controller가 있는 패키지 하위에 <code class=\"language-text\">/dto</code> 패키지를 만들고, dto를 작성했습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PageRequestDto</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"User Id Is Required\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"Title Is Required\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런 식으로 했어요</p>\n<h2 id=\"entity와-repository\" style=\"position:relative;\"><a href=\"#entity%EC%99%80-repository\" aria-label=\"entity와 repository permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity와 Repository</h2>\n<p>이제 Page에 대한 객체 Entity와 이를 맵핑하는 Repository를 만들어봅시다</p>\n<p>Repository는 간단히 아래처럼</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// page/infrastructure/repository/PageRepository.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PageRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게만 해주면 JPA성님께서 다 해주십니다.<br>\n그럼 아까부터 빨간 줄이 좍좍 그어지는 이 Page를 작성해주러 갑시다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// page/domain/entity/Page.java</span>\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"wai_page\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span><span class=\"token punctuation\">(</span>access <span class=\"token operator\">=</span> <span class=\"token class-name\">AccessLevel</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROTECTED</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span><span class=\"token punctuation\">(</span>access <span class=\"token operator\">=</span> <span class=\"token class-name\">AccessLevel</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PRIVATE</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Builder</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Page</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span>\n\t<span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Column</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Column</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Page</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">userId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>id는 <code class=\"language-text\">@GeneratedValue</code>로 적당히 생성하게 했습니다<br>\n<code class=\"language-text\">IDENTITY</code>로 하면 PK생성을 데이터베이스에 위임하고 <code class=\"language-text\">AUTO_INCREMENT</code>(mysql기준)같은 기능으로 자동 생성하게 한다고 하네요</p>\n<p>그리고 생성자를 직접 건드리지 않게 막고, 정적 메서드인 <code class=\"language-text\">.of()</code>로 가져오게 했습니다<br>\n왜인지? 모르겠지만? 인자로 <code class=\"language-text\">id</code>를 요구하기에 <code class=\"language-text\">builder</code>로 생성했어요</p>\n<h2 id=\"port와-adapter-out\" style=\"position:relative;\"><a href=\"#port%EC%99%80-adapter-out\" aria-label=\"port와 adapter out permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>port와 adapter (out)</h2>\n<p>이제 Page 객체 클래스도 만들었고, DB와 맵핑하는 JpaRepository도 만들었으니<br>\nout포트와 그 구현체인 adapter를 만들어봅시다</p>\n<p>port는 적당히 아래와 같이 작성해요</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PageQueryPort</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> pageId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">findById</code>, <code class=\"language-text\">findAll</code>같은 read작업은 <code class=\"language-text\">QueryPort</code>에<br>\n<code class=\"language-text\">save, delete</code>같은 <code class=\"language-text\">write</code>작업은 <code class=\"language-text\">CommandPort</code>에 작성합시다</p>\n<p>이제 구현체인 Adapter를 작성해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PageQueryAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PageQueryPort</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PageRepository</span> pageRepository<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> pageId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> pageRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>pageId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> pageRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code class=\"language-text\">QueryPort</code>를 구현하여 <code class=\"language-text\">QueryAdapter</code>를 만들었습니다<br>\n이렇게 하면 나중에 <code class=\"language-text\">findById</code>를 jpa가 아닌 다른 방법으로 가져오게 되는 경우에도<br>\n모든 코드의 <code class=\"language-text\">findById</code>를 바꾸는게 아닌, 여기 이 메서드만 바꿔주면 되겠죠?</p>\n<h1 id=\"usecase와-service-in\" style=\"position:relative;\"><a href=\"#usecase%EC%99%80-service-in\" aria-label=\"usecase와 service in permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UseCase와 Service (in)</h1>\n<p>이제 DB와의 내통 준비가 끝났으니, 인바운드 작업을 작성해봅시다.</p>\n<p>먼저 <code class=\"language-text\">/port/in</code> 에 UseCase를 작성해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GetPageUseCase</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Page</span> <span class=\"token function\">getPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAllPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런 식으로요<br>\n이제 이걸 Service에서 구현하게 되는데</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetPageService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GetPageUseCase</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PageQueryPort</span> pageQueryPort<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Page</span> <span class=\"token function\">getPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> pageQueryPort<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"해당 페이지를 찾을 수 없습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Page</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAllPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> pageQueryPort<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>간단히 이렇게 작성해볼 수 있겠습니다<br>\n앗! 그런데 <code class=\"language-text\">getPage</code>에서, <code class=\"language-text\">pageQueryPort.findById()</code> 를 바로 뱉는게 아니라, <code class=\"language-text\">orElseThrow</code>가 있어요.<br>\n<code class=\"language-text\">findById(id)</code>의 리턴값은 Optional이라서, 있으면 정상적으로 뱉고, 없다면 예외를 던집니다.<br>\n따라서, <code class=\"language-text\">orElseThrow</code>를 더해서, 있으면 리턴, 없으면 <code class=\"language-text\">NotFoundException</code>을 던지게 했습니다.</p>\n<h2 id=\"해치웠나\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%B9%98%EC%9B%A0%EB%82%98\" aria-label=\"해치웠나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해치웠나?</h2>\n<p>이렇게 했으면 이제 Controller의 TODO를 지울 때가 됐습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PutMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{id}\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">updatePage</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">PageRequestDto</span> pageRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tupdatePageUseCase<span class=\"token punctuation\">.</span><span class=\"token function\">updatePage</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> pageRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApiResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런 식의 코드가 가능하겠죠?</p>\n<p>이거 기록하면서 코드 보다보니 <code class=\"language-text\">update</code>로직이 찐 업데이트가 아닌 새 데이터를 생성하고 있더라구요??<br>\n바로 고쳤습니다..<br>\n이외에도 문득 눈에 들어온 게 있어서 두 가지 정도 수정을 좀 했네요<br>\n기록과 리캡이 이렇게 중요합니다.</p>","frontmatter":{"title":"Spring Boot CRUD TIL기록","date":"August 10, 2024","description":"근데 이제 헥사고날 아키텍처를 곁들인","tag":["TIL","Java","Spring"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%97%A5%EC%82%AC%EA%B3%A0%EB%82%A0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EB%A5%BC-%EB%B0%B0%EC%9B%A0%EC%96%B4%EC%9A%94\">헥사고날 아키텍처를 배웠어요</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B4%EC%99%B8-%EC%8B%A0%EA%B2%BD-%EC%93%B8-%EA%B2%83%EB%93%A4\">이외 신경 쓸 것들</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9D%B4%EC%A0%9C-crud-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B4%90%EC%9A%94\">이제 CRUD 만들어봐요</a></p>\n<ul>\n<li><a href=\"#controller\">Controller</a></li>\n<li><a href=\"#entity%EC%99%80-repository\">Entity와 Repository</a></li>\n<li><a href=\"#port%EC%99%80-adapter-out\">port와 adapter (out)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#usecase%EC%99%80-service-in\">UseCase와 Service (in)</a></p>\n<ul>\n<li><a href=\"#%ED%95%B4%EC%B9%98%EC%9B%A0%EB%82%98\">해치웠나?</a></li>\n</ul>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/restrict-routes-using-react-router-dom/"},"frontmatter":{"title":"⛔ React Router : 경로를 정의하고 접근을 제한하기"}},"next":null},"pageContext":{"id":"309045bc-9e1b-53b2-8c96-91320b6d5517","previousPostId":"91e273ac-b74a-5cfa-a5a9-0e95ddd2df0e","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}