{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/til/global-state-using-module-state-and-subscription/","result":{"data":{"site":{"siteMetadata":{"title":"조성개발실록"}},"markdownRemark":{"id":"251125e3-c76c-5296-aca6-a981f9f446b6","excerpt":"! 주의 : TIL 게시글입니다. 다듬지 않고 올리거나 기록을 통째로 복붙했을 수 있는 뒷고기 포스팅입니다. Micro State Management with React Hooks를 읽고 예제와 함께 정리하는 시리즈입니다. 직전 포스팅에서는 Context…","html":"<blockquote>\n<p>! 주의 : TIL 게시글입니다. 다듬지 않고 올리거나 기록을 통째로 복붙했을 수 있는 뒷고기 포스팅입니다.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/PacktPublishing/Micro-State-Management-with-React-Hooks\">Micro State Management with React Hooks</a>를 읽고 예제와 함께 정리하는 시리즈입니다.</p>\n</blockquote>\n<p><a href=\"/til/global-state-using-context\">직전 포스팅</a>에서는 Context를 사용한 전역상태에 대해 다뤘습니다<br>\nContext를 사용하면 서로 다른 서브트리에 서로 다른 값을 제공할 때 이점이 있었는데요<br>\n이러한 경우가 아닌 <strong>singleton 전역 상태</strong>를 전체 트리 범위에서 사용하려는 경우라면, <strong>Module State</strong>를 사용하는 편이 더 어울립니다</p>\n<p>시작하기 전에 : 모든 예제 코드는 <a href=\"https://github.com/sungpaks/micro-state-management-example\">공개된 레포지토리</a>에서 확인하실 수 있고, <a href=\"https://sungpaks.github.io/micro-state-management-example/\">여기</a>에 대충 배포해두었으니 직접 가셔서 눌러보실 수 있습니다.</p>\n<h1 id=\"module-state란\" style=\"position:relative;\"><a href=\"#module-state%EB%9E%80\" aria-label=\"module state란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module State란?</h1>\n<p>Module State라는 단어는 엄격한 정의 상으로는 <strong>ECMAScript 모듈 스코프에 정의된 상수 또는 변수</strong>인데요<br>\n이 책에서는 간단히 <strong>전역 또는 파일 스코프 내에 정의된 변수</strong>를 말합니다.<br>\n\"ECMAScript 모듈 스코프에 정의된\"... 이 잘 모르시겠다면 <a href=\"/what-and-why-and-how-bundler\">번들러 이야기</a>를 한번 보시면 좋을 듯 합니다</p>\n<p>간단한 Module State 예시를 살펴보기 위해, React와는 관련없지만 React의 상태처럼 동작하는 <code class=\"language-text\">state</code>를 하나 만들어봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">nextState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> nextState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 <code class=\"language-text\">get, set</code> 함수를 만들었습니다.<br>\n<strong>모듈 밖에서 사용</strong>가능하기 위해 <code class=\"language-text\">export</code>함을 잊지맙시다.</p>\n<p>이제 좀 더 React의 상태 엇비슷하려면 <code class=\"language-text\">setState</code>를 함수 업데이트도 가능하게 해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">nextState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> nextState <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function\">nextState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> nextState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 이 <code class=\"language-text\">setState</code>는 <code class=\"language-text\">setState(prev => ({...prev, count: prev.count + 1}))</code> 과 같이 익숙한 형태로 사용해볼 수 있습니다.<br>\n이 <code class=\"language-text\">state</code>는 \"전역 또는 파일 스코프 내에 정의된 변수\"이므로 Module State라고 불릴만 합니다. 별거없네요</p>\n<p>또는 이 Module State를 위와 같이 직접 정의하기보다, 이러한 Module State와 그에 접근하는 함수를 동봉하는 컨테이너를 만들어봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createContainer</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">initialState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setState</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">nextState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> nextState <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span> <span class=\"token operator\">?</span> <span class=\"token function\">nextState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> nextState<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> getState<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 이 Module State는 아래와 같이 사용할 수 있겠네요</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createContainer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getState<span class=\"token punctuation\">,</span> setState <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">createContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"react에서-module-state-사용하기\" style=\"position:relative;\"><a href=\"#react%EC%97%90%EC%84%9C-module-state-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"react에서 module state 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React에서 Module State 사용하기?</h2>\n<p>전역 변수 <code class=\"language-text\">count</code>를 선언하고 React 컴포넌트에서 이를 사용한다고 해봅시다</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inc<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아쉽게도 기대하는 대로 동작하지는 않습니다.<br>\n버튼을 클릭하면 <code class=\"language-text\">count</code> 변수의 값이 실제로 변하지만, 이는 React State가 아니므로 리렌더링을 유발하지 않습니다.</p>\n<p>React에서 리렌더링을 트리거하려면 <code class=\"language-text\">useState</code> 또는 <code class=\"language-text\">useReducer</code>같은 것을 사용해볼 수 있습니다</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inc1<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이러면 버튼을 누르면 실제로 <code class=\"language-text\">count</code>가 올라갑니다.<br>\n근데 여기서 <code class=\"language-text\">Component2</code>를 또한 추가해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inc2<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+2</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Component1</code>과 거의 동일하게 <code class=\"language-text\">Component2</code>를 구현하고 이제 눌러봅니다.</p>\n<p><img src=\"https://i.imgur.com/7vPhrAs.gif\" alt=\"상태가 따로 관리됨\"></p>\n<p>버튼을 누르면 <code class=\"language-text\">count</code>가 올라가긴 하지만, 당연히도 각 컴포넌트의 <code class=\"language-text\">count</code>상태는 공유되지 않습니다.<br>\n각 컴포넌트의 <code class=\"language-text\">count</code>만 따로 관리하는 상태인데요, 이게 <code class=\"language-text\">count</code>값들이 컴포넌트 간에 공유되었으면 좋겠습니다</p>\n<p><code class=\"language-text\">count</code> 상태변화를 컴포넌트 간에 공유하기 위한 <em>아주 단순한</em> 방법으로, <code class=\"language-text\">setState</code>함수들을 한 데 모아 한번에 트리거해볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> setStateFunctions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    setStateFunctions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>setState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      setStateFunctions<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>setState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    setStateFunctions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inc1<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">const setStateFunctions = new Set()</code>과 같이 <strong><code class=\"language-text\">setState</code>함수들 모음집</strong>을 만들고,<br>\n<code class=\"language-text\">count</code>를 증가시키는 함수는 <code class=\"language-text\">setStateFunctions</code>에 있는 함수들을 모두 트리거하게 하는 방식입니다<br>\n근데 이런 방식은 그다지 현실적이진 않네요. 두 컴포넌트들에 불필요하리만큼 반복적인 코드를 작성해야 했습니다.</p>\n<iframe\n  src=\"https://sungpaks.github.io/micro-state-management-example/sharing-module-state-with-subscription/\"\n  class=\"example-embed\"\n  title=\"Module State Example\"\n  loading=\"lazy\"\n  style=\"height: 600px\"\n></iframe>\n<p>살펴봤던 내용에 대한 동작 예제를 여기에서 확인하실 수 있습니다.</p>\n<h1 id=\"기본적인-subscription을-추가하기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-subscription%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"기본적인 subscription을 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본적인 subscription을 추가하기</h1>\n<p><strong>Subscription</strong>이란 <strong>업데이트같은 변화에 대해 notify를 받는 패턴</strong>입니다.<br>\n보통 아래와 같이 생기는게 국룰인데</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"store is updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// .. 다른 작업 ..</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 다음과 같은 subscription 구현을 가정합니다:</p>\n<ul>\n<li><code class=\"language-text\">store</code>라는 변수는 <code class=\"language-text\">subscribe</code> 라는 메서드를 가진다.</li>\n<li><code class=\"language-text\">subscribe</code>라는 메서드는 callback함수를 인자로 받는다.</li>\n<li><code class=\"language-text\">subscribe</code>라는 메서드는 <code class=\"language-text\">unsubscribe</code>라는 함수를 반환한다.</li>\n</ul>\n<p><code class=\"language-text\">store</code>에 어떤 변화가 들어왔다면 <code class=\"language-text\">subscribe</code>에 전달한 콜백함수가 실행되기를 기대하는 것이 첫 째요,<br>\n<code class=\"language-text\">subscribe(callbackFn)</code>으로 구독했다면 이 구독을 취소할 <code class=\"language-text\">unsubscribe</code> 함수를 반환받기를 기대하는 것이 둘 째입니다.</p>\n<p>그럼 이제부터, 이 Subscription으로 module state 관리를 구현해봅시다.</p>\n<h1 id=\"createstore\" style=\"position:relative;\"><a href=\"#createstore\" aria-label=\"createstore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">createStore</code></h1>\n<p>module state 상태값과 <code class=\"language-text\">subscribe</code> 메서드를 갖는 객체를 <code class=\"language-text\">store</code>라고 부르고, <code class=\"language-text\">store</code> 팩토리인 <code class=\"language-text\">createStore</code>함수를 만들어봅니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Store<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">getState</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  setState<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>action<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">subscribe</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> createStore <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">unknown</span></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>initialState<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Store<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> setState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nextState<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    state <span class=\"token operator\">=</span>\n      <span class=\"token keyword\">typeof</span> nextState <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span>\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>nextState <span class=\"token keyword\">as</span> <span class=\"token punctuation\">(</span>prev<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> nextState<span class=\"token punctuation\">;</span>\n    callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>callback <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subscribe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> getState<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">,</span> subscribe <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이전에 살펴본 <code class=\"language-text\">createContainer</code>와 비슷하게 생겼지만 다른 점은 아래와 같은 Subscription이 추가되었다는 점입니다.</p>\n<ul>\n<li>이 모듈 상태를 구독할 수 있는 <code class=\"language-text\">subscribe</code>메서드</li>\n<li>상태 업데이트 + 다른 구독 callback들을 트리거하는 <code class=\"language-text\">setState</code></li>\n</ul>\n<p>이제 이 <code class=\"language-text\">createStore</code>로</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"store is updated!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런 식으로 사용해볼 수 있습니다.<br>\n<code class=\"language-text\">store</code>는 내부에 <code class=\"language-text\">state</code>라는 상태 변수를 관리하는 하나의 Module State입니다.<br>\n그리고 여기까지 <code class=\"language-text\">createStore</code>는 React의 기능을 일절 사용하지 않은, 바닐라 JS로도 문제없이 돌아가는 예시입니다</p>\n<h1 id=\"usestore\" style=\"position:relative;\"><a href=\"#usestore\" aria-label=\"usestore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">useStore</code></h1>\n<p>이제 <code class=\"language-text\">store</code>를 React에서 사용하기 위한 <code class=\"language-text\">useStore</code>훅을 만들어 봅시다</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useStore</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>store<span class=\"token operator\">:</span> Store<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1]</span>\n\n    <span class=\"token keyword\">return</span> unsubscribe<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span>setState<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">useEffect</code>로 <code class=\"language-text\">store</code>를 구독하여 상태를 관리합니다.<br>\n<code class=\"language-text\">store</code>의 값이 변하면 <code class=\"language-text\">state</code>도 변하고, 상태값의 변경은 <code class=\"language-text\">store.setState</code>를 통하여 다른 모든 구독자들이 영향받게 합니다.</p>\n<p>중요한 지점이 주석친 <code class=\"language-text\">[1]</code> 부분인데, 이에 대한 원문 언급은 다음과 같습니다.</p>\n<blockquote>\n<p>This is to cover an edge case. It invokes the <code class=\"language-text\">setState()</code> function once in <code class=\"language-text\">useEffect</code>.<br>\nThis is due to the fact that <code class=\"language-text\">useEffect</code> is delayed and there's a change that <code class=\"language-text\">store</code> already has a new state.</p>\n</blockquote>\n<p>그러니까 <code class=\"language-text\">useEffect</code>는 <strong>늦게 실행된다</strong>라는 말인데<br>\n<code class=\"language-text\">useEffect</code>는 아시다시피 브라우저의 paint가 끝난 후 사이드 이펙트를 실행합니다.<br>\n그 사이에 <code class=\"language-text\">store</code>의 상태값이 이미 바뀌었을 수 있고, 따라서 상태를 한 번 동기화해줍니다.<br>\n만약 <code class=\"language-text\">[1]</code>에서 <code class=\"language-text\">store.getState()</code>값이 그대로라면, 상태값 비교가 동일하므로 리렌더링은 일어나지 않습니다(bail out).</p>\n<p>이제 <code class=\"language-text\">useStore</code>를 사용해봅시다</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStore</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">inc1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>prev <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> count<span class=\"token operator\">:</span> prev<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>inc1<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그냥 <code class=\"language-text\">useState</code> 쓰듯이 쓸 수 있습니다.</p>\n<h1 id=\"extra-re-render-방지하기\" style=\"position:relative;\"><a href=\"#extra-re-render-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"extra re render 방지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>extra re-render 방지하기</h1>\n<p>위에서 살펴본 <code class=\"language-text\">useStore</code> 훅은 상태값 객체 전체를 반환합니다.<br>\n이는 객체의 아주 일부만 업데이트되더라도 모든 구독자들이 리렌더링 대상이 된다는 말이고,<br>\n<a href=\"/til/global-state-using-context/#context-%EC%82%AC%EC%9A%A9-%EC%8B%9C-extra-re-render%EC%97%90-%EC%A3%BC%EC%9D%98\">이전 글에서 살펴본 extra re-render</a>문제가 다시 발생합니다.</p>\n<h2 id=\"working-with-selector\" style=\"position:relative;\"><a href=\"#working-with-selector\" aria-label=\"working with selector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Selector</h2>\n<p>Selector라는 잡기술을 써서 객체의 일부분만 골라서 써봅시다.<br>\n먼저 예를 들어 아래와 같은 객체를 상태로 갖는 <code class=\"language-text\">store</code>를 만들었다고 해봅시다</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count1<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> count2<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 아까같았으면 <code class=\"language-text\">useStore</code>로 이 store를 사용했을텐데요<br>\n대신에 <code class=\"language-text\">useStoreSelector</code>를 구현해봅시다.<br>\n이 <code class=\"language-text\">useStoreSelector</code> 훅은 필요한 값만을 <strong>select</strong>하는 함수를 인자로 받습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> useStoreSelector <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>store<span class=\"token operator\">:</span> Store<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">selector</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> unsubscribe<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>사용할 값만을 골라내는 <code class=\"language-text\">selector</code>함수를 추가 인자로 받고,<br>\n이 <code class=\"language-text\">selector</code>함수의 반환값만을 state로 유지합니다.<br>\n아래와 같이 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useStoreSelector</span><span class=\"token punctuation\">(</span>\n    store<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectCount2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count2<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">useStoreSelector</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span> selectCount2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">useCallback</code>을 사용하거나, selector함수를 컴포넌트 바깥에 선언하여 함수가 안정적인 참조를 가지게끔 해줍시다.<br>\n이 방법의 장점은, <strong>파생 상태</strong>를 쉽게 정의할 수 있다는 점입니다. 이에 관해서는 다음 챕터에서 알아봅니다.</p>\n<iframe\n  src=\"https://sungpaks.github.io/micro-state-management-example/sharing-module-state-with-subscription/working-with-a-selector\"\n  class=\"example-embed\"\n  title=\"Module State Example\"\n  loading=\"lazy\"\n  style=\"height: 600px\"\n></iframe>\n<p>여기에서 Selector를 사용한 구현 예제를 살펴보실 수 있습니다.<br>\n이 예제는 상태값이 <code class=\"language-text\">{ count: 0, name: \"COUNT\" }</code> 로 되어있는데요<br>\n<code class=\"language-text\">count</code>가 변했을 때 <code class=\"language-text\">name</code>을 참조하는 컴포넌트의 render count에 주목합시다.</p>\n<h1 id=\"working-with-usesubscription\" style=\"position:relative;\"><a href=\"#working-with-usesubscription\" aria-label=\"working with usesubscription permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with useSubscription</h1>\n<p>위에서 살펴본 <code class=\"language-text\">useStoreSelector</code>는 잘 작동하지만, 약간의 주의해야 할 점이 있습니다.\n<code class=\"language-text\">useEffect</code> 실행에는 조금의 텀이 있으므로(원문: <code class=\"language-text\">Because useEffect fires a little later</code>),<br>\n<code class=\"language-text\">store</code>나 <code class=\"language-text\">selector</code>가 변경되는 경우 재구독이 끝나기 전까지 stale한 상태값을 반환하게 됩니다.<br>\n이를 직접 고칠 수도 있겠지만 그러려면 기술적 노력이 은근히 들어갑니다 ..</p>\n<p>감사하게도 React에서 별도로 제공하는 <a href=\"https://www.npmjs.com/package/use-subscription\">useSubscription</a>패키지가 있는데요<br>\n아까 <code class=\"language-text\">useStoreSelector</code> 없이도 바로 <code class=\"language-text\">useSubScription</code>과 <code class=\"language-text\">store</code>를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">useSubscription</span><span class=\"token punctuation\">(</span><span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">getCurrentValue</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span> <span class=\"token comment\">// store에서 원하는 값</span>\n    subscribe<span class=\"token operator\">:</span> store<span class=\"token punctuation\">.</span>subscribe <span class=\"token comment\">// store에서 subscribe 메서드 가져오기</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>짜잔~ 아주쉽네요<br>\n공식문서에서 말하길, <code class=\"language-text\">getCurrentValue</code>와 <code class=\"language-text\">subscribe</code> 두 개의 메서드를 객체로 반환하면 됩니다.<br>\n이 때, 훅이 호출될 때마다 구독이 다시 진행되는 일을 막기 위해 <code class=\"language-text\">useMemo</code>로 감쌉니다.<br>\n이는 React 18에서 <code class=\"language-text\">useSyncExternalStore</code>가 도입되기 전까지 효과적으로 외부 store를 구독하기 위해 사용할 수 있는 방법이었습니다.</p>\n<iframe\n  src=\"https://sungpaks.github.io/micro-state-management-example/sharing-module-state-with-subscription/working-with-use-subscription\"\n  class=\"example-embed\"\n  title=\"Module State Example\"\n  loading=\"lazy\"\n  style=\"height: 600px\"\n></iframe>\n<p>이것도 잘 되는지 확인해보세요</p>\n<h2 id=\"working-with-usesyncexternalstore\" style=\"position:relative;\"><a href=\"#working-with-usesyncexternalstore\" aria-label=\"working with usesyncexternalstore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with useSyncExternalStore?</h2>\n<p>이 책이 쓰여질 당시에는 React 18이 아직 나오기 전이었고, <code class=\"language-text\">useSyncExternalStore</code>가 나온다는 사실만 알려져 있었습니다.<br>\n다이시 카토 선생님도 이에 대한 짧은 언급을 하고 넘어갔는데요<br>\n지금은 React 18이 이미 나왔고 <code class=\"language-text\">useSyncExternalStore</code>를 사용할 수 있으니, 어떻게 사용할 수 있는지 궁금해져서 찾아봤습니다</p>\n<p>일단, <code class=\"language-text\">useSyncExternalStore</code>란 <strong>동시성 렌더링 중에도 안전하게 저장소의 값을 적절히 구독</strong>할 수 있는 훅입니다.</p>\n<ul>\n<li>External Store란 우리가 <strong>구독</strong>할 수 있는 무언가를 뜻하는데\n<ul>\n<li>Internal Store로는 props, context, useReducer, useState 등을 떠올려볼 수 있습니다. Component의 범위를 벗어나지 않네요</li>\n<li>External Store로는 전역변수, 모듈 스코프 변수(Module State), DOM 상태, redux또는 zustand store 등.. 을 생각해볼 수 있습니다. Component 바깥에 존재합니다.</li>\n</ul>\n</li>\n</ul>\n<p><code class=\"language-text\">useSyncExternalStore</code>의 <a href=\"https://ko.react.dev/reference/react/useSyncExternalStore\">공식문서 레퍼런스</a>는 아래와 같습니다</p>\n<blockquote>\n<p>store에 있는 데이터의 스냅샷을 반환합니다. 두 개의 함수를 인수로 전달해야 합니다.</p>\n<ol>\n<li>subscribe 함수는 store를 구독하고 구독을 취소하는 함수를 반환해야 합니다.</li>\n<li>getSnapshot 함수는 store에서 데이터의 스냅샷을 읽어야 합니다.</li>\n</ol>\n</blockquote>\n<p>이것으로 기존 <code class=\"language-text\">useStore</code>를 어떻게 대체할 수 있는지 봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> unsubscribe <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> unsubscribe<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>useStore는 이렇게 생겼었죠? <code class=\"language-text\">selector</code> 함수를 전달받고, 그 반환값을 상태로 유지해서, <code class=\"language-text\">useEffect</code>에서 구독을 구현합니다.<br>\n이 대신에 <code class=\"language-text\">useSyncExternalStore</code>를 사용하면 매우 간단해집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useStore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useSyncExternalStore</span><span class=\"token punctuation\">(</span>\n    store<span class=\"token punctuation\">.</span>subscribe<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>store<span class=\"token punctuation\">,</span> selector<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이것도 아래 예제에서 잘 동작하는지 확인해볼 수 있습니다.</p>\n<iframe\n  src=\"https://sungpaks.github.io/micro-state-management-example/sharing-module-state-with-subscription/working-with-use-sync-external-store\"\n  class=\"example-embed\"\n  title=\"Module State Example\"\n  loading=\"lazy\"\n  style=\"height: 600px\"\n></iframe>\n<h3 id=\"tearing-현상과-usesyncexternalstore\" style=\"position:relative;\"><a href=\"#tearing-%ED%98%84%EC%83%81%EA%B3%BC-usesyncexternalstore\" aria-label=\"tearing 현상과 usesyncexternalstore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tearing 현상과 useSyncExternalStore</h3>\n<p>이제 궁금해질 수 있는 것은, <code class=\"language-text\">useSyncExternalStore</code>가 왜 필요했는지, 일 것 같아요<br>\nReact 18부터는 <strong>동시성 렌더링</strong>이 가능해졌는데, 잘 모르시겠다면 <a href=\"/react-18-concurrency-and-streaming-with-rsc/#react-18---%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\">여기를 참고</a>하시면 좋을 것 같구요.<br>\n아무튼 간에, 이제 렌더링이 <strong>중단 가능</strong>해짐에 따라, Tearing 현상이 발생했습니다.</p>\n<p><a href=\"https://github.com/reactwg/react-18/discussions/69\">Tearing</a>이란, <strong>렌더링 도중 React가 store를 업데이트하게 되면 UI 불일치가 발생하는 현상</strong>인데요</p>\n<figure>\n<p><img src=\"https://i.imgur.com/2SoslYl.png\" alt=\"tearing 현상\"></p>\n<figcaption>\n<p>출처: Discussion from React 18 Working Group, \"what is tearing?\"</p>\n</figcaption>\n</figure>\n<p>이전에는 렌더링이 Synchronous해서, store값이 <code class=\"language-text\">blue</code>임을 보고 렌더링을 진행하기 시작하면, 그 중간에 store값이 <code class=\"language-text\">red</code>로 바뀌어도 렌더링이 모두 진행되고 나서야 이 변경이 진행되었습니다.<br>\n그러나 이제 렌더링이 \"중간에 끝날 수 있게\"되었고, 아래와 같은 시퀀스가 가능해졌습니다.</p>\n<ol>\n<li>어떤 컴포넌트가, store값이 <code class=\"language-text\">blue</code>임을 보고 렌더링..</li>\n<li>렌더링이 중단되고 store값이 <code class=\"language-text\">red</code>로 업데이트됨</li>\n<li>이제 다시 렌더링을 재개, 다른 컴포넌트들은 store값이 <code class=\"language-text\">red</code>임을 보고 렌더링..</li>\n</ol>\n<p>이로 인해 위 그림처럼, UI 불일치가 발생할 수 있게 됩니다.<br>\n이러한 tearing 현상을 방지하고 외부 store와 React간의 동기화를 위해 <code class=\"language-text\">useSyncExternalStore</code>를 사용합니다.</p>\n<p>다이시 카토 선생님이 쓰신 <a href=\"https://blog.axlight.com/posts/why-use-sync-external-store-is-not-used-in-jotai/\">Why useSyncExternalStore is not used in Jotai</a>라는 글도 있는데요, 한 번 읽어보면 견문이 깊어집니다.<br>\n귀찮으실까봐 대충 정리해드리자면</p>\n<ul>\n<li><code class=\"language-text\">useState</code>(또는 <code class=\"language-text\">useReducer</code>) + <code class=\"language-text\">useEffect</code>를 사용하는 방법과 <code class=\"language-text\">useSyncExternalStore</code>를 사용하는 방법 사이의 차이점은 <em>일시적인 tearing 현상</em> 임.</li>\n<li>Jotai는 외부 store를 사용하는게 아닌 Context 혼합방식을 사용하므로, <code class=\"language-text\">useTransition</code>과 함께 동시성 렌더링을 사용하도록 설계되었음\n<ul>\n<li><code class=\"language-text\">useState</code>를 사용하며 <code class=\"language-text\">useTransition</code>과의 결합을 보장한다는 점이 tearing보다 중요한 설계 지점임</li>\n</ul>\n</li>\n<li>Zustand는 외부 store를 사용하여 구현되므로 <code class=\"language-text\">useSyncExternalStore</code>를 사용함.\n<ul>\n<li>Zustand를 <code class=\"language-text\">useTransition</code>과 사용하면 뭔가 이슈가 있는데(<a href=\"%5Bhttps://codesandbox.io/s/9ss9r6%5D(https://codesandbox.io/s/9ss9r6)\">데모참조</a>), 이는 <code class=\"language-text\">useTransition</code>의 pending상태에 의한 fallback이 아닌 Suspense fallback을 보여주는 쪽으로 설계되어서임</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Ideally, if React provides a building-block function to allow creating a custom useState-like hook (that requires state versioning), Jotai can do it better.<br>\nIt’s very unlikely that it will happen. So, it’s a trade-off.</p>\n</blockquote>\n<hr>\n<p><br>\n지난 글에서는 Context를 사용한 전역상태 관리를,<br>\n이번 글에서는 Module State를 사용한 전역상태 관리를 알아봤습니다<br>\n다음 글에서는 이 두 가지 패턴을 쓰까먹어보겠습니다.</p>","frontmatter":{"title":"Zustand 메인테이너가 알려주는 Module State로 전역상태 관리하기","date":"May 12, 2025","description":"[Micro State Management with React Hooks] Chapter 4","tag":["TIL","React","TypeScript","JavaScript"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#module-state%EB%9E%80\">Module State란?</a></p>\n<ul>\n<li><a href=\"#react%EC%97%90%EC%84%9C-module-state-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">React에서 Module State 사용하기?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-subscription%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">기본적인 subscription을 추가하기</a></p>\n</li>\n<li>\n<p><a href=\"#createstore\"><code class=\"language-text\">createStore</code></a></p>\n</li>\n<li>\n<p><a href=\"#usestore\"><code class=\"language-text\">useStore</code></a></p>\n</li>\n<li>\n<p><a href=\"#extra-re-render-%EB%B0%A9%EC%A7%80%ED%95%98%EA%B8%B0\">extra re-render 방지하기</a></p>\n<ul>\n<li><a href=\"#working-with-selector\">Working with Selector</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#working-with-usesubscription\">Working with useSubscription</a></p>\n<ul>\n<li>\n<p><a href=\"#working-with-usesyncexternalstore\">Working with useSyncExternalStore?</a></p>\n<ul>\n<li><a href=\"#tearing-%ED%98%84%EC%83%81%EA%B3%BC-usesyncexternalstore\">Tearing 현상과 useSyncExternalStore</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/til/global-state-using-context/"},"frontmatter":{"title":"Jotai 메인테이너가 알려주는 Context로 전역상태 관리하기"}},"next":{"fields":{"slug":"/til/global-state-using-context-and-subscription/"},"frontmatter":{"title":"Context로 전역상태 만들어서 천만 구독자 만들기"}}},"pageContext":{"id":"251125e3-c76c-5296-aca6-a981f9f446b6","previousPostId":"d29c2412-6447-5e98-a140-38614268f352","nextPostId":"ec2b1cbe-79ba-5aaa-b6e4-367dff0b5428"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}