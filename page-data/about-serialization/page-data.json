{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/about-serialization/","result":{"data":{"site":{"siteMetadata":{"title":"조성개발실록"}},"markdownRemark":{"id":"19f1ec09-3463-57b7-920d-8f2d50fcf1d9","excerpt":"여전히 스프링 공부중입니다 로그인 구현 파트인데요, 세션에 유저 정보를 저장하려고 SessionUser 클래스를 따로 만들었습니다 이미 User…","html":"<p>여전히 스프링 공부중입니다<br>\n로그인 구현 파트인데요,<br>\n세션에 유저 정보를 저장하려고 <strong>SessionUser</strong> 클래스를 따로 만들었습니다<br>\n이미 <strong>User</strong> 엔티티 클래스가 존재하는데도 말이죠??<br>\n그 이유를.. <strong>직렬화</strong>를 언급하시며 설명해주셨습니다</p>\n<p>이 <strong>직렬화</strong>라는 용어는 며칠 전에 디자인패턴 책을 보다가 잠깐 언급된걸 봤었는데<br>\n스프링 공부하다가 <strong>직렬화</strong>를 또 만나고나서 그날 밤<br>\n디자인패턴 책의 <strong>커맨드 패턴</strong> 부분에서 <strong>직렬화</strong>가 또! 나와버렸습니다???</p>\n<p>흠..</p>\n<h1 id=\"직렬화serialization란\" style=\"position:relative;\"><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94serialization%EB%9E%80\" aria-label=\"직렬화serialization란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>직렬화(Serialization)란?</h1>\n<blockquote>\n<p>serialization은 지속시키거나 전송할 수 있는 형태로 개체 상태를 변환하는 프로세스입니다.</p>\n</blockquote>\n<p>마이크로소프트 .NET docs에서 가져왔습니다</p>\n<p>여러 글들을 뒤적뒤적해본 결과.. 직렬화는 사실상<br>\n어떤 객체나 데이터를 <strong>박제</strong>한다고 보면 편한 것 같습니다</p>\n<p><strong>직렬화</strong>는 어떤 객체나 데이터를 어떤 일관적인 포맷으로 변환하여, 파일이나 데이터베이스 또는 메모리 등에 저장하거나 다른 시스템 환경으로 전송할 수 있도록 하는 과정이며<br>\n또한 <strong>역직렬화</strong>는 이렇게 변환되었던 포맷을 원래의 객체나 데이터로 다시 원상복구하는 과정입니다</p>\n<h1 id=\"커맨드-패턴에서-만난-직렬화\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%A7%A8%EB%93%9C-%ED%8C%A8%ED%84%B4%EC%97%90%EC%84%9C-%EB%A7%8C%EB%82%9C-%EC%A7%81%EB%A0%AC%ED%99%94\" aria-label=\"커맨드 패턴에서 만난 직렬화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커맨드 패턴에서 만난 직렬화</h1>\n<p>커맨드 패턴의 자세한 설명은 거두절미하겠습니다<br>\n<a href=\"https://refactoring.guru/ko/design-patterns/command\">여기</a>에 꽤 설명이 잘 되어 있습니다.<br>\n대충.. 어떤 일련의 동작들이나 요청들을 객체의 형태로 캡슐화하는 셈인데요<br>\n이렇게 만들어진 커맨드 객체는 다른 여느 객체와 마찬가지로 직렬화될 수 있다는 특징을 가집니다.<br>\n그 덕분에 커맨드 패턴을 이용하면 작업들을 대기열에 넣거나, 실행을 지연 또는 예약하거나, ... 할 수 있습니다.</p>\n<p>예를 들어.. 유튜브를 틀어놓고, 파일을 다운로드받으면서, 동시에 이메일을 쓴다고 해봅시다.<br>\n공통점 하나 없는 작업들이지만, 커맨드 패턴을 사용한다면</p>\n<ul>\n<li>영상 재생</li>\n<li>파일 다운로드</li>\n<li>키보드 입력</li>\n</ul>\n<p>이 세 가지의 서로 다른 작업들은 커맨드 객체로 캡슐화하고, 각 커맨드 객체의 실행 메서드를 트리거하기만 하면 됩니다.<br>\n<img src=\"https://i.imgur.com/EriLecS.png\" alt=\"\" loading=\"lazy\" width=\"40%\" height=\"auto\"><br>\n이제 작업의 수행은 객체를 트리거하며 통과시키는 것으로 이루어지게 되었으므로,<br>\n커맨드 객체들이 지나간 로그를 찍어두면 상태를 저장하고 나아가 복원해버릴 수 있습니다.<strong>직렬화</strong>되었네요!</p>\n<h1 id=\"java에서의-직렬화\" style=\"position:relative;\"><a href=\"#java%EC%97%90%EC%84%9C%EC%9D%98-%EC%A7%81%EB%A0%AC%ED%99%94\" aria-label=\"java에서의 직렬화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA에서의 직렬화</h1>\n<p>자바에서는 <strong>직렬화</strong>가 이렇게 통합니다.</p>\n<blockquote>\n<p>자바 시스템에서 사용되는 객체 또는 데이터를 바이트 스트림 형태의 연속적 데이터로 변환하는 과정</p>\n</blockquote>\n<p>늘 그렇듯이, 객체는 힙 또는 스택 메모리에 존재했다가 프로그램이 종료되면 사라집니다.<br>\n이 때 객체를 직렬화하여 <strong>박제</strong>해버리면 JVM 메모리에 존재하던 객체를 *영속화(Persistence)*하여 휘발성 데이터를 지속적으로 저장하게 됩니다.</p>\n<p>이러한 특징 덕분에, 자바에서는 직렬화를 사용하는 경우가 더러 있는데요, 대표적으로</p>\n<ul>\n<li>세션 : 톰캣 세션 클러스터링을 수행하거나 세션 데이터를 DB에 저장하고자 하는 경우 등</li>\n<li>캐시 : DB에서 조회한 객체를 직렬화하여 따로 뒀다가, 또 필요할 때 재조회보다는 역직렬화하여 가져다 쓰도록 함</li>\n</ul>\n<p>직렬화를 구현하려면 클래스 선언 시 <code class=\"language-text\">Serializable</code> 인터페이스를 구현합니다.<br>\n이 인터페이스는 따로 구현해야할 추상메서드가 없는 <strong>마커 인터페이스</strong>입니다.<br>\n이제 직렬화하려면 <code class=\"language-text\">ObjectOutputStream</code> 스트림에 객체를 출력합니다 : <code class=\"language-text\">.writeObject()</code> 메서드 호출<br>\n또한 역직렬화하려면 <code class=\"language-text\">ObjectInputStream</code> 스트림으로부터 객체를 입력받습니다 : <code class=\"language-text\">.readObject()</code>메서드 호출<br>\n역직렬화할 때는 원본 클래스로 캐스팅해줘야 합니다.</p>\n<p>한번 해볼까요?<br>\n먼저 대충 <code class=\"language-text\">Foo</code> 클래스를 아무렇게나 만들어봅시다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> staticField <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> <span class=\"token string\">\"sungho@example.com\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"sungho\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> password <span class=\"token operator\">=</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그런 다음 직렬화하는 테스트 코드를 작성해봅시다 :</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializationTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 객체 생성</span>\n\t\t<span class=\"token class-name\">Foo</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 직렬화된 데이터를 저장할 파일 이름</span>\n\t\t<span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> <span class=\"token string\">\"foo.ser\"</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 직렬화</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\toos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"직렬화 완료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자바에서 직렬화된 데이터 파일은 <code class=\"language-text\">.ser</code>, <code class=\"language-text\">.obj</code>등을 사용한다고 하네요. 그냥 바이트의 연속체라서 <code class=\"language-text\">.txt</code>도 무방하긴합니다\n아무튼 실행하고 한번 열어보면<br>\n<img src=\"https://i.imgur.com/5gw7b3T.png\" alt=\"\" loading=\"lazy\" width=\"50%\" height=\"auto/\"><br>\n헉 알아볼 수 없는 문자들이 가득하죠?</p>\n<p>이제 역직렬화를 해봅시다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeserializationTest</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> <span class=\"token string\">\"foo.ser\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 역직렬화</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Foo</span> deserializedFoo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"역직렬화 완료\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// 역직렬화된 객체의 정보 출력</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name: \"</span> <span class=\"token operator\">+</span> deserializedFoo<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email: \"</span> <span class=\"token operator\">+</span> deserializedFoo<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 해서 실행해보면<br>\n<img src=\"https://i.imgur.com/fp430FX.png\" alt=\"\" loading=\"lazy\" width=\"40%\" height=\"auto/\"><br>\n헉?? <strong>생성자 없이도 객체가 생겨버렸습니다</strong> !!</p>\n<p>주의할 점이 몇 가지 있는데요</p>\n<ul>\n<li>직렬화 대상은 인스턴스 필드이며, 메소드나 <code class=\"language-text\">static</code> 필드 등은 제외입니다.</li>\n<li>여러 객체를 직렬화하는 경우, 순서에 유의합니다 :<br>\nobj1, obj2, obj3 순서로 직렬화했다면, 동일하게 obj1, obj2, obj3 순서로 역직렬화해야합니다. 이는 사실 직렬화 순서대로 바이트문자가 기록되니 그래야만 하겠죠?\n직렬화 대상 객체가 많다면 대신 <code class=\"language-text\">ArrayList</code>같은 컬렉션에 넣고 직렬화합시다. 이렇게 하면 역직렬화 순서를 신경쓰지 않아도 됩니다.</li>\n<li><code class=\"language-text\">private</code> 필드까지도 직렬화에 포함됩니다. 만약 직렬화에서 제외시키고자 한다면 필드 선언 시 <code class=\"language-text\">transient</code> 키워드를 붙이면 됩니다.</li>\n<li>(당연한 듯 하지만) 부모클래스가 <code class=\"language-text\">Serializable</code> 구현체이면 자식클래스 또한 직렬화 대상입니다. 반대로 자식클래스가 직렬화여도 부모의 인스턴스 필드는 포함되지 않습니다.</li>\n</ul>\n<h1 id=\"json-쓰면-안될까요\" style=\"position:relative;\"><a href=\"#json-%EC%93%B0%EB%A9%B4-%EC%95%88%EB%90%A0%EA%B9%8C%EC%9A%94\" aria-label=\"json 쓰면 안될까요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON 쓰면 안될까요?</h1>\n<p>JSON으로 데이터를 주고받는 것도 직렬화/역직렬화의 일종입니다. 그냥 JSON써서 데이터를 주고받으면 안될까요? 아니면 XML이라거나..</p>\n<p>물론 JSON도 좋지만 자바에서 자바 직렬화를 사용하는 이유는, 자바 맞춤형이라 자바 시스템끼리의 상호작용에 상당히 효율적입니다.<br>\n이는 직렬화된 자바 바이트스트림은 단순 데이터만 포함하는 것이 아닌, 타입 정보, 클래스 메타 데이터 등까지도 포함하기 때문인데요<br>\n같은 자바 시스템끼리라는 전제가 있다면 사실상 그대로 갖다 이식해버리는 수준이 되어버립니다.<br>\nJSON이었다면 파싱해서 인스턴스화하고, 등등... 귀찮은 일을 더 했어야겠죠?</p>\n<p>물론 이 특징으로 인해 JSON보다 무거워진다거나, 이외에도 다른 단점들이 존재합니다.</p>\n<h1 id=\"java-직렬화의-단점-ㅜㅜ\" style=\"position:relative;\"><a href=\"#java-%EC%A7%81%EB%A0%AC%ED%99%94%EC%9D%98-%EB%8B%A8%EC%A0%90-%E3%85%9C%E3%85%9C\" aria-label=\"java 직렬화의 단점 ㅜㅜ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 직렬화의 단점 ㅜㅜ</h1>\n<p>일단 직렬화를 구현하기로 하면 신경써야 할 점들이 많습니다..</p>\n<ul>\n<li>직렬화하여 일단 한번 배포하고 나면, 이 직렬화된 바이트 스트림 인코딩이 사실상 하나의 공개API가 되어버립니다.<br>\n이로 인해 클래스 내부 구현을 수정하기 껄끄러워질 수 있겠죠?</li>\n<li>아까 살펴본 바와 같이, <code class=\"language-text\">private</code>멤버까지도 <code class=\"language-text\">transient</code>가 없다면 그대로 직렬화되므로 캡슐화가 깨진다는 문제가 있습니다.</li>\n<li>객체를 생성자를 통해 생성했던 기존의 방식을 우회하여 제약없이 객체를 생성한다는 특징때문에 버그나 보안에 취약할 수 있습니다.</li>\n<li>역직렬화 과정에서 공격당할 위험이 존재합니다. 역직렬화 시 호출되어 위험한 동작을 수행하는 메서드를 *가젯(gadget)*이라고 합니다.</li>\n<li>직렬화를 지원하는 클래스를 상속받게 된다면 이렇게 신경써야할 문제들 또한 떠안게 되어버립니다..</li>\n</ul>\n<p>등등 ... 여러가지가 있으니<br>\n꽤나 잘 생각해서 적재적소에 써야 하겠습니다</p>\n<hr>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REFERENCE</h1>\n<ul>\n<li><a href=\"https://inpa.tistory.com/entry/JAVA-%E2%98%95-%EC%A7%81%EB%A0%AC%ED%99%94Serializable-%EC%99%84%EB%B2%BD-%EB%A7%88%EC%8A%A4%ED%84%B0%ED%95%98%EA%B8%B0\">https://inpa.tistory.com/entry/JAVA-%E2%98%95-%EC%A7%81%EB%A0%AC%ED%99%94Serializable-%EC%99%84%EB%B2%BD-%EB%A7%88%EC%8A%A4%ED%84%B0%ED%95%98%EA%B8%B0</a></li>\n<li><a href=\"https://refactoring.guru/ko/design-patterns/command\">https://refactoring.guru/ko/design-patterns/command</a></li>\n<li><a href=\"https://namu.wiki/w/%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EC%A7%81%EB%A0%AC%ED%99%94%20%ED%98%95%EC%8B%9D\">https://namu.wiki/w/%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EC%A7%81%EB%A0%AC%ED%99%94%20%ED%98%95%EC%8B%9D</a></li>\n<li><a href=\"https://learn.microsoft.com/ko-kr/dotnet/standard/serialization/\">https://learn.microsoft.com/ko-kr/dotnet/standard/serialization/</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%A7%81%EB%A0%AC%ED%99%94\">https://ko.wikipedia.org/wiki/%EC%A7%81%EB%A0%AC%ED%99%94</a></li>\n</ul>\n<hr>\n<p>이거 쓰다가 집에 늦게 갑니다..<br>\n이만 마칩니다</p>","frontmatter":{"title":"💾 직렬화.. 라고 아시나요?","date":"January 25, 2024","description":"저는 당연히 몰랐습니다","tag":["Java"]},"tableOfContents":"<ul>\n<li><a href=\"#%EC%A7%81%EB%A0%AC%ED%99%94serialization%EB%9E%80\">직렬화(Serialization)란?</a></li>\n<li><a href=\"#%EC%BB%A4%EB%A7%A8%EB%93%9C-%ED%8C%A8%ED%84%B4%EC%97%90%EC%84%9C-%EB%A7%8C%EB%82%9C-%EC%A7%81%EB%A0%AC%ED%99%94\">커맨드 패턴에서 만난 직렬화</a></li>\n<li><a href=\"#java%EC%97%90%EC%84%9C%EC%9D%98-%EC%A7%81%EB%A0%AC%ED%99%94\">JAVA에서의 직렬화</a></li>\n<li><a href=\"#json-%EC%93%B0%EB%A9%B4-%EC%95%88%EB%90%A0%EA%B9%8C%EC%9A%94\">JSON 쓰면 안될까요?</a></li>\n<li><a href=\"#java-%EC%A7%81%EB%A0%AC%ED%99%94%EC%9D%98-%EB%8B%A8%EC%A0%90-%E3%85%9C%E3%85%9C\">JAVA 직렬화의 단점 ㅜㅜ</a></li>\n<li><a href=\"#reference\">REFERENCE</a></li>\n</ul>"},"previous":{"fields":{"slug":"/what-is-spring-bean/"},"frontmatter":{"title":"🫘 스프링 입문자라면 필히 알아둬야 합니다. 스프링 빈(Bean)이란?"}},"next":{"fields":{"slug":"/wsl-localhost-issue/"},"frontmatter":{"title":"🫸 [WSL] Proxy error : Could not proxy request"}}},"pageContext":{"id":"19f1ec09-3463-57b7-920d-8f2d50fcf1d9","previousPostId":"5f536400-7181-5564-a3d7-f2a99742ff51","nextPostId":"6d0594f2-a21c-5f96-8977-cf1ae2c6ffac"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}