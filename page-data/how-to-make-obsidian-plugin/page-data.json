{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/how-to-make-obsidian-plugin/","result":{"data":{"site":{"siteMetadata":{"title":"조성개발실록"}},"markdownRemark":{"id":"5a653c52-2ca1-597a-adfc-d04e90e7119f","excerpt":"여러분은 노트 앱 뭐쓰시나요 보통 노션 자주들 쓰시는데.. 저도 노션 썼었지만 힙해보여서 여러 이유로 옵시디언으로 갈아탄지…","html":"<p>여러분은 노트 앱 뭐쓰시나요<br>\n보통 노션 자주들 쓰시는데.. 저도 노션 썼었지만<br>\n<del>힙해보여서</del> 여러 이유로 옵시디언으로 갈아탄지 6개월? 됐습니다</p>\n<p>블로그를 쓸 때도 어차피 블로그 글도 마크다운이니까<br>\n옵시디언에 어느정도 써놓고 거의 그대로 옮기다시피 할 때도 많습니다.</p>\n<p>그런데 불편한 점이 하나 있다면<br>\n옵시디언은 이미지를 붙여넣으면 로컬 이미지파일을 새로 생성하고 <code class=\"language-text\">![[image.png]]</code> 이렇게 붙여넣습니다.<br>\n이건 그냥 커뮤니티 플러그인인 imgur 플러그인을 씁니다<br>\n이 친구는 <code class=\"language-text\">imgur.com</code>에 이미지를 업로드해주고 그 URL로 <code class=\"language-text\">![](URL)</code> 이렇게 붙여넣어주는 고마운 친구입니다<br>\n이러면 로컬에 계속 이미지들이 주르륵 존재할 필요도 없고 편하죠</p>\n<p>그런데 깃허브블로그를 시작하면서 느낀 문제점은..<br>\n이렇게 <code class=\"language-text\">![](URL)</code> 형태로 붙여넣으면 크기 조절이 안 되기도 하고<br>\n현재 브라우저의 폭 따위는 신경쓰지 않고 원본 크기로 존재하기 때문에<br>\n가로 스크롤 바가 생겨버려서 매우 열받는 점이 있습니다</p>\n<p>아무튼.. 그런 이유로 <code class=\"language-text\">![](URL)</code> 형태를 <code class=\"language-text\">&lt;img src=\"URL\"/></code> 이렇게 바꿔서<br>\n사이즈나 여타 옵션같은걸 마음대로 넣고 싶은데<br>\n저렇게 이미지 태그로 바꾸는 과정이 상당히 귀찮습니다..<br>\n그래서 버튼 하나로 저걸 모두 이미지태그로 바꿔주는 플러그인을 만들어버리자!<br>\n라는 생각을 해서.. 실제로 만들어봤습니다.</p>\n<h1 id=\"시작하기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기</h1>\n<p><a href=\"https://steemit.com/hive-137029/@anpigon/started-obsidian-plugin-development\">이 블로그 글</a>을 참고했습니다. 감사합니다 _ _</p>\n<p>링크에 아주 친절한 설명이 잘 나와있습니다</p>\n<p>일단 꼭!! 다른 새로운 Vault를 생성하고 거기서 작업하도록 합시다</p>\n<p>가장 먼저..<br>\n기본적으로 Obsidian에서 제공하는 Example Plugin Template이 있습니다<br>\n이걸 이용해 새 플러그인 레포지토리를 만들고,<br>\n옵시디언 Vault의 <code class=\"language-text\">yourVault/.obsidian/plugin</code> 경로로 들어가서<br>\n방금 만든 레포지토리를 클론합니다<br>\n레포지토리 이름은, <code class=\"language-text\">obsidian-</code>으로 시작하는게 국룰인 것 같으니 따라해줍시다</p>\n<p>그럼 이제 클론받은 폴더로 이동해서<br>\n<code class=\"language-text\">npm i</code>로 의존성을 설치하고, <code class=\"language-text\">npm run dev</code>로 코드를 빌드합니다<br>\n이제 옵시디언에서 설정->커뮤니티 플러그인->(먼저 커뮤니티 플러그인 사용을 활성화하고)->하단에 설치된 플러그인에서 새로고침을 누릅니다.<br>\n이제 등장한 <code class=\"language-text\">Sample Plugin</code>을 활성화합니다<br>\n<img src=\"https://i.imgur.com/WpFrrnP.png\" alt=\"\" loading=\"lazy\" width=\"100%\" height=\"100%/\"></p>\n<p>이제 <code class=\"language-text\">manifest.json</code> 파일을 수정하여 <code class=\"language-text\">id</code>, <code class=\"language-text\">name</code>같은걸 적당히 바꿔보시고 진행하시면 됩니다..<br>\n그리고 마지막에 나오는 <code class=\"language-text\">hot-reload</code>플러그인 받아서 켜놓고 하면 확실히 편합니다.<br>\n링크에서 설명을 잘 해주셔서 세팅은 이정도로 하겠습니다</p>\n<h1 id=\"어떻게-개발합니까\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B0%9C%EB%B0%9C%ED%95%A9%EB%8B%88%EA%B9%8C\" aria-label=\"어떻게 개발합니까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 개발합니까?</h1>\n<p>Obsidian Plugin 공식 Docs에서는 <code class=\"language-text\">main.ts</code> 또는 새로운 <code class=\"language-text\">.ts</code>파일을 만들어서 코드를 작성하라고 합니다.<br>\n<code class=\"language-text\">main.js</code>에는 뭔가 작성하지 마세요.<br>\n<code class=\"language-text\">main.ts</code>에 작성된 내용이 이곳에 자동으로 컴파일됩니다.</p>\n<p>맞다! <code class=\"language-text\">npm run dev</code> 켜놓으셨죠?<br>\n<img src=\"https://i.imgur.com/sX7r9nP.png\" alt=\"\" loading=\"lazy\" width=\"100%\" height=\"100%/\"><br>\n대충 이런 상태여야 합니다</p>\n<p>이제 <code class=\"language-text\">main.ts</code> 열어봅시다<br>\n<img src=\"https://i.imgur.com/MHKQyIf.png\" alt=\"\" loading=\"lazy\" width=\"100%\" height=\"100%/\"><br>\n뭐가 많네요... 쩝<br>\n<code class=\"language-text\">const ribbonIconEl</code> 밑에 마우스 이벤트가 정의되어 있으니 여기를 한번 수정해볼까요??<br>\n<img src=\"https://i.imgur.com/lMoVNKl.png\" alt=\"\" loading=\"lazy\" width=\"100%\" height=\"100%/\">\n이렇게 바꿔봅시다<br>\n저장하고 왼쪽 사이드바의 주사위모양 아이콘을 눌러봅시다<br>\n<img src=\"https://i.imgur.com/UAIBAsX.png\" alt=\"\" loading=\"lazy\" width=\"70%\" height=\"auto/\"><br>\n이거 눌러보면.. 짜잔<br>\n<img src=\"https://i.imgur.com/Mff2C1t.png\" alt=\"\" loading=\"lazy\" width=\"50%\" height=\"auto/\"><br>\n귀여운 Notice가 뜹니다!</p>\n<p>오.. 그러면 저 부분을 적당히 작성하면 버튼 한번으로 전부 <code class=\"language-text\">&lt;img></code> 태그로 바꿔버릴 수 있겠죠??</p>\n<h1 id=\"데이터에-접근하기\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\" aria-label=\"데이터에 접근하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터에 접근하기</h1>\n<p>그럼 이제 데이터를 가져오는 법이 궁금합니다?<br>\n데이터를 가져와야 현재 열린 파일에서 <code class=\"language-text\">![]()</code>만 쏙 뽑아서 그 URL 그대로 <code class=\"language-text\">&lt;img></code>태그로 변환할 수 있겠죠?</p>\n<p>처음엔 이게 제가 못 찾은건지.. 대충써놓은건지.. 잘 못찾다가<br>\n<a href=\"https://forum.obsidian.md/t/how-to-get-current-file-content-without-yaml-frontmatter/26197\">여기</a>에서 데이터에 접근하는 적절한 방법을 찾을 수 있었습니다</p>\n<p>일단 현재 앱에서 열린 워크스페이스를 가져오려면<br>\n<code class=\"language-text\">this.app.workspace</code> 객체를 가져옵니다.<br>\n만약 .. 현재 열린 파일을 가져오려면 <code class=\"language-text\">this.app.workspace.getActiveFile();</code> 이런식이겠고,<br>\n현재 활성화된 에디터 객체는 <code class=\"language-text\">this.app.workspace.activeEditor.editor</code>로 가져올 수 있습니다.<br>\n이 에디터 객체를 <code class=\"language-text\">const editor</code>로 유지해두고<br>\n<code class=\"language-text\">editor.getDoc().getValue()</code>를 메소드를 사용하여 출력해보면..</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>workspace<span class=\"token punctuation\">.</span><span class=\"token function\">getActiveFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> editor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>workspace<span class=\"token punctuation\">.</span>activeEditor<span class=\"token operator\">?.</span>editor\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>editor <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notice</span><span class=\"token punctuation\">(</span>editor<span class=\"token punctuation\">.</span><span class=\"token function\">getDoc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://i.imgur.com/3VrfWm3.png\" alt=\"\" loading=\"lazy\" width=\"100%\" height=\"auto/\"><br>\n오호...<br>\n이제 값을 잘 변화시킬 수도 있는지 보기 위해<br>\n<code class=\"language-text\">editor.getDoc().setLine(0, \"Hello!!\")</code> 줄을 추가해봅시다.<br>\n<code class=\"language-text\">Notice</code> 밑에 추가하면 먼저 바뀌기 전 값들이 나오고 맨 윗줄이 바뀌어버리겠죠?<br>\n<img src=\"https://i.imgur.com/tVt3PBH.png\" alt=\"\" loading=\"lazy\" width=\"100%\" height=\"auto/\"><br>\n<img src=\"https://i.imgur.com/Eekqykt.png\" alt=\"\" loading=\"lazy\" width=\"40%\" height=\"auto\"><br>\n와우. . 준비가 끝났습니다.</p>\n<h1 id=\"구현-ㄱ\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84-%E3%84%B1\" aria-label=\"구현 ㄱ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현 ㄱ</h1>\n<p>흠.. 일단 <code class=\"language-text\">replace</code>나 <code class=\"language-text\">match</code>같은걸 이용해서<br>\n<code class=\"language-text\">![](URL)</code>처럼 생긴 부분을 찾고<br>\n<code class=\"language-text\">URL</code>만 뽑아다가 <code class=\"language-text\">&lt;img></code>태그를 만들어내면 될 것 같습니다</p>\n<p>그럼 일단 정규표현식이 필요한데요<br>\nGPT한테 물어보니<br>\n<code class=\"language-text\">const regex = /!\\[]\\(([^)]+)\\)/;</code><br>\n이런걸 뱉었습니다.<br>\n이제 이 정규표현식으로 <code class=\"language-text\">const matchedStrings = content.match(regexByURL);</code>과 같이 쓰면<br>\n<code class=\"language-text\">matchedStrings[1]</code>에 제가 원하던 URL이 추출되어있게 됩니다!!</p>\n<p>이제 이 URL을 가지고 <br>\n<code class=\"language-text\">const imgTag = '&lt;img src=\"' + url + '\" alt loading=\"lazy\" />';</code><br>\n이렇게 써준다면 이미지 태그를 완성할 수 있습니다</p>\n<p>사이즈나 다른 옵션같은거는 명령어 팔레트로 세팅을 미리 해놓도록 하면 좋겠는데,<br>\n귀찮으니 나중에 또 업데이트하려고 합니다</p>\n<p>아무튼.. 근데 그냥 이렇게 만든 <code class=\"language-text\">imgTag</code>를 반환하기에는 앞뒤로 다른 무고한 문자열이 있을 수도 있겠죠?<br>\n<code class=\"language-text\">content.replace(regex, imgTag)</code> 이런식으로 써서 해당 부분만 쏙! 바꿔주도록 합시다<br>\n그리고 한 라인 내에 여러 이미지가 있을 수도 있으니까<br>\n이미지가 있었으면 바뀐 문자열이 나올거고,<br>\n이미지가 없으면 <code class=\"language-text\">null</code>이 반환되도록 한 뒤<br>\n<code class=\"language-text\">null</code>이 반환될 때까지 반복적으로 수행하도록 해줍니다</p>\n<p>그럼 .. 짜잔 버튼만 누르면<br>\n<img src=\"https://i.imgur.com/eAOkQe1.png\" alt=\"\" loading=\"lazy\" width=\"50%\" height=\"auto/\"><br>\n이랬던게<br>\n<img src=\"https://i.imgur.com/cfgIgZC.png\" alt=\"\" loading=\"lazy\" width=\"100%\" height=\"auto/\"><br>\n요래 됩니다<br>\n성공적이네요~</p>\n<h1 id=\"다른-곳에서-쓰려면\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A5%B8-%EA%B3%B3%EC%97%90%EC%84%9C-%EC%93%B0%EB%A0%A4%EB%A9%B4\" aria-label=\"다른 곳에서 쓰려면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다른 곳에서 쓰려면</h1>\n<p>칼은 사용을 해야 칼이겠죠?<br>\n마침 또 작업한건 다른 테스트용 Vault였으니<br>\n이걸 원래 쓰던 Vault에 가져와보도록 합시다</p>\n<p>일단 작업한 내용을 github 레포지토리에 푸시하고<br>\nRelease를 하나 만듭니다<br>\nRelease에는 세 가지 파일을 넣습니다:<br>\n<code class=\"language-text\">manifest.json, main.js, style.css</code>\\</p>\n<p>이제 이 release된 세 파일을 다른 vault에서 쓰려면<br>\n<code class=\"language-text\">yourAnotherVault/.obsidian/plugins</code>에 새로운 폴더를 만들고<br>\n세 파일을 집어넣으면 됩니다<br>\n이제 커뮤니티 플러그인 -> 설치된 플러그인 -> 새로고침 한번 해주면<br>\n<img src=\"https://i.imgur.com/GyoeEBZ.png\" alt=\"\" loading=\"lazy\" width=\"100%\" height=\"auto/\"><br>\n와 우! 이제 사용하면 됩니다!</p>\n<p>깃허브의 obsidian-release 레포지토리에 PR등록하면 커뮤니티 플러그인으로 등록할 수 있는 것 같은데<br>\n이런 너무 단순한 플러그인을 받아줄지? 도 의심스러울 뿐더러<br>\n쫌.. 귀찮아서 나중에 하렵니다</p>\n<hr>\n<br/>\n<br/>\n<p>시작할때는 꽤나 막막했는데<br>\n막상 해보니까 별로 한 것도 없어보이네요<br>\n쩝.. 인생이란 원래 그런게 아닐지~</p>\n<p>전에 커리어리 눈팅하다가<br>\n개발자 공부하고 취준하고 하는게 너무 막막하다 라는 글에<br>\n원래 개발이라는게 막막하고 시니어도 그렇다. 그 막막함을 직시하는게 중요한 것 같다.<br>\n이런 답변을 본 적 있습니다</p>\n<p>저도 뭔가 새로 할 때마다 너무 막막한데<br>\n지나고 보면.. 하면 되는구나 싶습니다<br>\n아무튼 이런 것도 해보고<br>\n재밌네요~</p>\n<p>이만 마칩니다</p>","frontmatter":{"title":"🔌 옵시디언 플러그인 개발 이렇게 시작해보세요","date":"January 07, 2024","description":"옵시디언 플러그인 간단한거 하나 만들어봤습니다.","tag":["Obsidian","TypeScript"]},"tableOfContents":"<ul>\n<li><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">시작하기</a></li>\n<li><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B0%9C%EB%B0%9C%ED%95%A9%EB%8B%88%EA%B9%8C\">어떻게 개발합니까?</a></li>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0\">데이터에 접근하기</a></li>\n<li><a href=\"#%EA%B5%AC%ED%98%84-%E3%84%B1\">구현 ㄱ</a></li>\n<li><a href=\"#%EB%8B%A4%EB%A5%B8-%EA%B3%B3%EC%97%90%EC%84%9C-%EC%93%B0%EB%A0%A4%EB%A9%B4\">다른 곳에서 쓰려면</a></li>\n</ul>"},"previous":{"fields":{"slug":"/studying-typescript-day1/"},"frontmatter":{"title":"😏 저랑.. 타입스크립트 공부 하실래요? (TypeScript)"}},"next":{"fields":{"slug":"/migration-react-component-to-typescript/"},"frontmatter":{"title":"🙃 타입스크립트가 되고 싶은 리액트 컴포넌트는 나에게.."}}},"pageContext":{"id":"5a653c52-2ca1-597a-adfc-d04e90e7119f","previousPostId":"692e663e-b25f-5719-9c79-9761cc75ed2d","nextPostId":"3dadefdb-a6c0-52b6-b3f6-f0aff3b0e408"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}