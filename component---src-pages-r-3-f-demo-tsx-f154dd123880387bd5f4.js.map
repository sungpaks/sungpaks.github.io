{"version":3,"file":"component---src-pages-r-3-f-demo-tsx-f154dd123880387bd5f4.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/images/ceres.jpg","webpack://gatsby-starter-blog/./src/images/sun.jpg","webpack://gatsby-starter-blog/./src/images/stars-background.jpg","webpack://gatsby-starter-blog/./src/pages/r3f-demo.tsx"],"sourcesContent":["export default __webpack_public_path__ + \"static/ceres-7c20bdbe662366525fdbb769dbd44d43.jpg\";","export default __webpack_public_path__ + \"static/sun-4b569137334e6108165145a289371d07.jpg\";","export default __webpack_public_path__ + \"static/stars-background-09fecfb664aafb77e679fd67c13fc028.jpg\";","import {\n  Canvas,\n  MeshProps,\n  Object3DNode,\n  useFrame,\n  useLoader,\n  useThree\n} from \"@react-three/fiber\";\nimport React, {\n  MutableRefObject,\n  Ref,\n  RefObject,\n  Suspense,\n  useCallback\n} from \"react\";\nimport {\n  Color,\n  Float32BufferAttribute,\n  Mesh,\n  Points,\n  TextureLoader,\n  Vector3\n} from \"three\";\nimport Layout from \"../components/Layout\";\n// @ts-ignore\nimport ceres from \"../images/ceres.jpg\"; // @ts-ignore\nimport sun from \"../images/sun.jpg\"; // @ts-ignore\nimport starBackground from \"../images/stars-background.jpg\";\n\nexport default function R3FDemo({ location }: { location: Location }) {\n  return (\n    <Layout location={location}>\n      <div\n        id=\"canvas-container\"\n        style={{\n          border: \"0.5px solid gray\",\n          height: \"100vh\",\n          backgroundColor: \"black\",\n          position: \"fixed\",\n          width: \"100vw\",\n          top: 0,\n          left: 0\n        }}\n      >\n        <Canvas\n          camera={{\n            fov: 75,\n            near: 0.1,\n            far: 1000,\n            position: [0, 175, 0]\n            // lookAt: () => [0, 0, 0]\n          }}\n        >\n          <ambientLight intensity={1} />\n          {/* <directionalLight position={[10, 10, 10]} /> */}\n          <Sun />\n        </Canvas>\n      </div>\n    </Layout>\n  );\n}\n\nfunction Sun() {\n  const mesh = React.useRef<Mesh | null>(null);\n  const background = useLoader(TextureLoader, starBackground);\n  const sunTexture = useLoader(TextureLoader, sun);\n\n  useThree(({ scene, camera }) => {\n    scene.background = background;\n    camera.position.x = 20;\n  });\n\n  return (\n    <mesh ref={mesh}>\n      <sphereGeometry args={[5, 32, 32]} />\n      <meshPhongMaterial\n        args={[\n          {\n            map: sunTexture\n          }\n        ]}\n      />\n      <pointLight position={[0, 0, 0]} intensity={1000} />\n      <SunSystem />\n    </mesh>\n  );\n}\n\nfunction SunSystem(props: MeshProps) {\n  let lastElapsedTime = 0;\n  const OrbitAfterImageArray: any[] = [];\n  const planetRef = React.useRef<Mesh | null>(null);\n  const trailCount = 30;\n  const positions = React.useRef<Float32Array>(\n    new Float32Array(trailCount * 3)\n  );\n  const pointIndex = React.useRef(0);\n  const trailRef = React.useRef<Points | null>(null);\n\n  useFrame(({ clock }) => {\n    const interval = clock.getElapsedTime() - lastElapsedTime;\n    if (interval > 1 && planetRef.current) {\n      lastElapsedTime = clock.getElapsedTime();\n\n      const planetPosition = new Vector3();\n      planetRef.current.getWorldPosition(planetPosition);\n\n      positions.current[pointIndex.current * 3] = planetPosition.x;\n      positions.current[pointIndex.current * 3 + 1] = planetPosition.y;\n      positions.current[pointIndex.current * 3 + 2] = planetPosition.z;\n\n      pointIndex.current = (pointIndex.current + 1) % trailCount;\n\n      if (trailRef.current) {\n        const geometry = trailRef.current.geometry;\n        geometry.setAttribute(\n          \"position\",\n          new Float32BufferAttribute(positions.current, 3)\n        );\n        trailRef.current.geometry.attributes.position.needsUpdate = true;\n      }\n    }\n  });\n  return (\n    <mesh {...props}>\n      <Suspense fallback={null}>\n        <Planet planetRef={planetRef} position={[30, 0, 0]} />\n      </Suspense>\n      <points ref={trailRef}>\n        <bufferGeometry />\n        <pointsMaterial size={1} color={\"aqua\"} />\n      </points>\n    </mesh>\n  );\n}\n\ninterface PlanetProps extends MeshProps {\n  planetRef: MutableRefObject<Mesh | null>;\n}\n\nconst Planet = ({ planetRef, ...props }: PlanetProps) => {\n  const [isClicked, setIsClicked] = React.useState(false);\n  const mesh = React.useRef<Mesh | null>(null);\n\n  const texture = useLoader(TextureLoader, ceres);\n\n  // 궤도 파라미터 설정\n  const semiMajorAxis = 100; // 장축 반지름 (x축 방향)\n  const semiMinorAxis = 40; // 단축 반지름 (z축 방향)\n  const orbitCenter = [semiMajorAxis / 2, 0, 0]; // 중심점\n  const orbitSpeed = 0.2; // 속도\n\n  useFrame(({ clock, scene }) => {\n    if (!mesh.current) return;\n    const elapsedTime = clock.getElapsedTime() * orbitSpeed; // 시간에 따라 궤도 위치 갱신\n    mesh.current.lookAt(0, 0, 0); // 중심을 바라보도록 설정\n\n    // 타원 궤도 좌표 계산\n    const x = semiMajorAxis * Math.cos(elapsedTime); // x축 좌표\n    const z = semiMinorAxis * Math.sin(elapsedTime); // z축 좌표\n\n    mesh.current.position.set(\n      orbitCenter[0] + x,\n      orbitCenter[1],\n      orbitCenter[2] + z\n    );\n  });\n\n  return (\n    <mesh\n      ref={node => {\n        mesh.current = node;\n        planetRef.current = node;\n      }}\n      onClick={() => setIsClicked(prev => !prev)}\n      scale={isClicked ? 1.5 : 1}\n      {...props}\n    >\n      <axesHelper args={[5]} />\n      <sphereGeometry args={[1, 32, 32]} />\n      <meshStandardMaterial args={[{ map: texture }]} />\n      <ParticleSystem\n        orbitSpeed={orbitSpeed}\n        color=\"#7DF9FF\"\n        orbitCenter={orbitCenter}\n        planetRef={mesh}\n      />\n      <ParticleSystem\n        orbitSpeed={orbitSpeed}\n        dust\n        color=\"#FFD700\"\n        orbitCenter={orbitCenter}\n        planetRef={mesh}\n      />\n      <ParticleSystem\n        orbitSpeed={orbitSpeed}\n        dust\n        color=\"#FF4500\"\n        orbitCenter={orbitCenter}\n        planetRef={mesh}\n      />\n      <ParticleSystem\n        orbitSpeed={orbitSpeed}\n        color=\"#6457A6\"\n        orbitCenter={orbitCenter}\n        planetRef={mesh}\n      />\n    </mesh>\n  );\n};\n\nfunction ParticleSystem({\n  color,\n  dust,\n  orbitSpeed,\n  orbitCenter,\n  planetRef\n}: {\n  color: string;\n  dust?: boolean;\n  orbitSpeed: number;\n  orbitCenter: number[];\n  planetRef: RefObject<Mesh | null>;\n}) {\n  const particles = React.useRef<Points>(null);\n  const getRandomPositionFromCenter = useCallback(() => {\n    return Math.random() * 2 - 1;\n  }, []);\n\n  const count = 1000; // 파티클 수\n  const particlesData = React.useMemo(() => {\n    const positions = [];\n    const velocities = [];\n    for (let i = 0; i < count; i++) {\n      const distance = 5 + Math.random() * 5; // 중심으로부터 거리\n      const x = dust ? (Math.random() - 0.9) * 5 : (Math.random() - 0.5) * 1.5;\n      const y = (Math.random() - 0.5) * 1.5;\n      const z = Math.cos(Math.PI * 2) * -distance; // 높이 축 랜덤\n      positions.push(\n        getRandomPositionFromCenter(),\n        getRandomPositionFromCenter(),\n        getRandomPositionFromCenter()\n      ); // 위치 설정 );\n      const velocityFactor = dust ? 0.005 : 0.01;\n      velocities.push(\n        x * velocityFactor,\n        y * velocityFactor,\n        z * velocityFactor\n      ); // 속도 설정\n    }\n    return { positions, velocities };\n  }, []);\n  useFrame(() => {\n    if (!particles.current) return;\n    const planetWorldPosition = new Vector3();\n    planetRef?.current?.getWorldPosition(planetWorldPosition);\n    const distanceFromCenter = Math.sqrt(\n      (planetWorldPosition.x - 2 * orbitCenter[0]) ** 2 +\n        (planetWorldPosition.z - 2 * orbitCenter[2]) ** 2\n    );\n\n    const positions = particles.current.geometry.attributes.position.array;\n    for (let i = 0; i < count; i++) {\n      positions[i * 3] += particlesData.velocities[i * 3]; // x\n      positions[i * 3 + 1] += particlesData.velocities[i * 3 + 1]; // y\n      positions[i * 3 + 2] += particlesData.velocities[i * 3 + 2]; // z\n\n      // 중심으로부터 멀리 날아가면 다시 초기화\n      const dist = Math.sqrt(\n        positions[i * 3] ** 2 +\n          positions[i * 3 + 1] ** 2 +\n          positions[i * 3 + 2] ** 2\n      );\n      if (dust) {\n        positions[i * 3] -= dist * orbitSpeed * 0.01;\n      }\n\n      const maxDistance = (distanceFromCenter / 100) ** 2 * 100; // 파티클이 최대 거리를 기준으로 사라지는 값\n      const minProbability = 0.01; // 최소 제거 확률\n      const maxProbability = 0.99; // 최대 제거 확률\n\n      // 확률 계산: 거리 기반 확률 설정\n      const probability =\n        Math.pow(dist / maxDistance, 2) * (maxProbability - minProbability) +\n        minProbability;\n\n      if (Math.random() < probability / 2) {\n        positions[i * 3] = getRandomPositionFromCenter();\n        positions[i * 3 + 1] = getRandomPositionFromCenter();\n        positions[i * 3 + 2] = getRandomPositionFromCenter();\n      }\n    }\n    particles.current.geometry.attributes.position.needsUpdate = true;\n  });\n\n  return (\n    <points ref={particles}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          count={count}\n          array={new Float32Array(particlesData.positions)}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial size={0.1} color={color} transparent opacity={0.8} />\n    </points>\n  );\n}\n"],"names":["R3FDemo","location","React","Layout","id","style","border","height","backgroundColor","position","width","top","left","Canvas","camera","fov","near","far","intensity","Sun","mesh","background","useLoader","TextureLoader","starBackground","sunTexture","sun","useThree","_ref2","scene","x","ref","args","map","SunSystem","props","lastElapsedTime","planetRef","positions","Float32Array","trailCount","pointIndex","trailRef","useFrame","_ref3","clock","getElapsedTime","current","planetPosition","Vector3","getWorldPosition","y","z","geometry","setAttribute","Float32BufferAttribute","attributes","needsUpdate","Suspense","fallback","Planet","size","color","_ref4","isClicked","setIsClicked","texture","ceres","orbitCenter","semiMajorAxis","orbitSpeed","_ref5","elapsedTime","lookAt","Math","cos","sin","set","node","onClick","prev","scale","ParticleSystem","dust","particles","getRandomPositionFromCenter","useCallback","random","count","particlesData","velocities","i","distance","PI","push","velocityFactor","planetWorldPosition","_planetRef$current","distanceFromCenter","sqrt","array","dist","maxDistance","minProbability","maxProbability","probability","pow","attach","itemSize","transparent","opacity"],"sourceRoot":""}