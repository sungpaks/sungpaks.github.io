{"version":3,"file":"component---src-templates-tag-post-tsx-48ad96d3cf3194f5fe78.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/TagButtonList.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/templates/tag-post.tsx"],"sourcesContent":["import React from \"react\";\nimport { MarkdownRemarkNode } from \"../types/common\";\n\nexport default function TagButtonList({\n  post,\n  onClickTag\n}: {\n  post: MarkdownRemarkNode;\n  onClickTag: (tag: string) => void;\n}) {\n  return (\n    <>\n      {post.frontmatter.tag?.map(c => {\n        return (\n          <button\n            key={c}\n            id={c}\n            className=\"custom-button tag-button\"\n            onClick={() => onClickTag(c)}\n          >\n            {c}\n          </button>\n        );\n      })}\n    </>\n  );\n}\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\";\nimport { FC } from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\ninterface ComponentProps {\n  description: string;\n  title: string;\n  children?: any;\n  thumbnail?: string;\n}\n\nconst Seo = ({ description, title, children, thumbnail }: ComponentProps) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || metaDescription,\n    thumbnail\n  };\n\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:type\" content=\"website\" />\n      {seo.thumbnail && <meta property=\"og:image\" content={seo.thumbnail} />}\n      <meta property=\"og:site_name\" content={site.siteMetadata.title} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n      <meta\n        name=\"google-site-verification\"\n        content=\"iP6AmcpYft1WcrX_A3DlYxkWH2bwT-mrYanTBB8vm4k\"\n      />\n    </>\n  );\n};\n\nexport default Seo;\n","import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Layout from \"../components/Layout\";\nimport Seo from \"../components/seo\";\nimport { FC } from \"react\";\nimport TagButton from \"../components/TagButtonList\";\n\ninterface Frontmatter {\n  date: string;\n  title: string;\n  description: string;\n  tag: string[];\n}\n\ninterface MarkdownRemarkNode {\n  fields: {\n    slug: string;\n  };\n  frontmatter: Frontmatter;\n}\n\ninterface SiteMetadata {\n  title: string;\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: SiteMetadata;\n  };\n  allMarkdownRemark: {\n    nodes: MarkdownRemarkNode[];\n  };\n}\n\ninterface ComponentProps {\n  pageContext: {\n    tags: string;\n  };\n  data: PageQueryData;\n  location: any;\n}\n\nconst TagPost = ({ pageContext, data, location }: ComponentProps) => {\n  const { tags } = pageContext;\n  const posts = data.allMarkdownRemark.nodes;\n  const tagHeader = \"Ï°∞ÏÑ±Í∞úÎ∞úÏã§Î°ù - \" + tags + \" Í¥ÄÎ†® Í≤åÏãúÍ∏Ä\";\n  return (\n    <Layout location={location}>\n      <Seo title={tagHeader} description={tags} />\n      <div style={{ marginTop: \"100px\", marginBottom: \"100px\" }}>\n        <h2 style={{ paddingBottom: \"10px\", paddingTop: \"50px\" }}>\n          <span>üîç {tags}</span>\n          <span> Í¥ÄÎ†® Í≤åÏãúÍ∏Ä</span>\n          <hr></hr>\n        </h2>\n        {posts.map(post => {\n          return (\n            <article\n              key={post.fields.slug}\n              className=\"post-list-item\"\n              itemScope\n              itemType=\"http://schema.org/Article\"\n            >\n              <h2>\n                <Link\n                  className=\"post-list-item-title\"\n                  to={`${post.fields.slug}`}\n                >\n                  {post.frontmatter.title}\n                </Link>\n              </h2>\n              <TagButton post={post as any} onClickTag={() => {}} />\n              <p>{post.frontmatter.description}</p>\n              <small>{post.frontmatter.date}</small>\n            </article>\n          );\n        })}\n      </div>\n    </Layout>\n  );\n};\n\nexport default TagPost;\n\nexport const pageQuery = graphql`\n  query ($tags: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      limit: 2000\n      filter: { frontmatter: { tag: { in: [$tags] } } }\n    ) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          tag\n        }\n      }\n    }\n  }\n`;\n"],"names":["TagButtonList","post","onClickTag","React","frontmatter","tag","_post$frontmatter$tag","map","c","key","id","className","onClick","_ref","description","title","children","thumbnail","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_site$siteMetadata","seo","name","content","property","_site$siteMetadata2","social","_site$siteMetadata2$s","twitter","pageContext","data","location","tags","posts","allMarkdownRemark","nodes","tagHeader","Layout","Seo","style","marginTop","marginBottom","paddingBottom","paddingTop","fields","slug","itemScope","itemType","Link","to","TagButton","date"],"sourceRoot":""}